2024-06-04 11:35:25 - Starting EcommerceManagementApplication using Java 21.0.1 with PID 1412 (/Users/user/Downloads/ecommerce-management/target/classes started by user in /Users/user/Downloads/ecommerce-management)
2024-06-04 11:35:25 - No active profile set, falling back to 1 default profile: "default"
2024-06-04 11:35:29 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-04 11:35:29 - Finished Spring Data repository scanning in 318 ms. Found 4 JPA repository interfaces.
2024-06-04 11:35:32 - Tomcat initialized with port 8080 (http)
2024-06-04 11:35:32 - Starting service [Tomcat]
2024-06-04 11:35:32 - Starting Servlet engine: [Apache Tomcat/10.1.18]
2024-06-04 11:35:33 - Initializing Spring embedded WebApplicationContext
2024-06-04 11:35:33 - Root WebApplicationContext: initialization completed in 7403 ms
2024-06-04 11:35:34 - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-04 11:35:34 - HHH000412: Hibernate ORM core version 6.4.1.Final
2024-06-04 11:35:34 - HHH000026: Second-level cache disabled
2024-06-04 11:35:35 - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-04 11:35:35 - HikariPool-1 - Starting...
2024-06-04 11:35:38 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@163e8949
2024-06-04 11:35:38 - HikariPool-1 - Start completed.
2024-06-04 11:35:46 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-06-04 11:35:49 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 11:35:53 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-06-04 11:35:54 - 15 mappings in 'requestMappingHandlerMapping'
2024-06-04 11:35:55 - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2024-06-04 11:35:55 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@673fdc28, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4cf1ec2, org.springframework.security.web.context.SecurityContextHolderFilter@36a25457, org.springframework.security.web.header.HeaderWriterFilter@3cdc5155, org.springframework.web.filter.CorsFilter@16eb01d4, org.springframework.security.web.authentication.logout.LogoutFilter@308e465b, org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter@4e7b89b6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@48590849, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6c38f4de, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4246f904, org.springframework.security.web.session.SessionManagementFilter@5390862e, org.springframework.security.web.access.ExceptionTranslationFilter@3545c913, org.springframework.security.web.access.intercept.AuthorizationFilter@15d68a50]
2024-06-04 11:35:55 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2024-06-04 11:35:55 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2024-06-04 11:35:56 - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2024-06-04 11:35:56 - Tomcat started on port 8080 (http) with context path ''
2024-06-04 11:35:56 - Started EcommerceManagementApplication in 33.646 seconds (process running for 35.613)
2024-06-04 11:36:36 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-06-04 11:36:36 - Initializing Servlet 'dispatcherServlet'
2024-06-04 11:36:36 - Detected StandardServletMultipartResolver
2024-06-04 11:36:36 - Detected AcceptHeaderLocaleResolver
2024-06-04 11:36:36 - Detected FixedThemeResolver
2024-06-04 11:36:36 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@1254a3cd
2024-06-04 11:36:36 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@5de6c7d7
2024-06-04 11:36:36 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2024-06-04 11:36:36 - Completed initialization in 23 ms
2024-06-04 11:38:23 - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 11:38:23 - HikariPool-1 - Shutdown initiated...
2024-06-04 11:38:23 - HikariPool-1 - Shutdown completed.
2024-06-04 11:38:38 - Starting EcommerceManagementApplication using Java 21.0.1 with PID 1777 (/Users/user/Downloads/ecommerce-management/target/classes started by user in /Users/user/Downloads/ecommerce-management)
2024-06-04 11:38:38 - No active profile set, falling back to 1 default profile: "default"
2024-06-04 11:38:40 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-04 11:38:40 - Finished Spring Data repository scanning in 98 ms. Found 4 JPA repository interfaces.
2024-06-04 11:38:41 - Tomcat initialized with port 8080 (http)
2024-06-04 11:38:41 - Starting service [Tomcat]
2024-06-04 11:38:41 - Starting Servlet engine: [Apache Tomcat/10.1.18]
2024-06-04 11:38:41 - Initializing Spring embedded WebApplicationContext
2024-06-04 11:38:41 - Root WebApplicationContext: initialization completed in 2306 ms
2024-06-04 11:38:41 - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-04 11:38:41 - HHH000412: Hibernate ORM core version 6.4.1.Final
2024-06-04 11:38:41 - HHH000026: Second-level cache disabled
2024-06-04 11:38:42 - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-04 11:38:42 - HikariPool-1 - Starting...
2024-06-04 11:38:42 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@25e8e59
2024-06-04 11:38:42 - HikariPool-1 - Start completed.
2024-06-04 11:38:44 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-06-04 11:38:44 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 11:38:46 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-06-04 11:38:46 - 15 mappings in 'requestMappingHandlerMapping'
2024-06-04 11:38:47 - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2024-06-04 11:38:47 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1c000c2f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2c7ac998, org.springframework.security.web.context.SecurityContextHolderFilter@427c2c96, org.springframework.security.web.header.HeaderWriterFilter@5fcff272, org.springframework.web.filter.CorsFilter@7f6936cc, org.springframework.security.web.authentication.logout.LogoutFilter@6c4e11d0, org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter@4a532271, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@91c11b6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3ec6f3f1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@56bf6f1e, org.springframework.security.web.session.SessionManagementFilter@8cd2bb5, org.springframework.security.web.access.ExceptionTranslationFilter@6fc03cf6, org.springframework.security.web.access.intercept.AuthorizationFilter@a165c11]
2024-06-04 11:38:47 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2024-06-04 11:38:47 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2024-06-04 11:38:47 - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2024-06-04 11:38:47 - Tomcat started on port 8080 (http) with context path ''
2024-06-04 11:38:47 - Started EcommerceManagementApplication in 9.464 seconds (process running for 9.937)
2024-06-04 11:39:01 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-06-04 11:39:01 - Initializing Servlet 'dispatcherServlet'
2024-06-04 11:39:01 - Detected StandardServletMultipartResolver
2024-06-04 11:39:01 - Detected AcceptHeaderLocaleResolver
2024-06-04 11:39:01 - Detected FixedThemeResolver
2024-06-04 11:39:01 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@5e8bc83e
2024-06-04 11:39:01 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@62cf873a
2024-06-04 11:39:01 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2024-06-04 11:39:01 - Completed initialization in 12 ms
2024-06-04 11:39:01 - POST "/auth/login", parameters={}
2024-06-04 11:39:01 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 11:39:01 - Read "application/json;charset=UTF-8" to [Registration info: Email : k1@gmail.compassword : dev11Full Name : nullPhone Number : nullCountry :  (truncated)...]
2024-06-04 11:39:01 - Username: dev11 
2024-06-04 11:39:02 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 11:39:02 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@182809f1]
2024-06-04 11:39:02 - Completed 200 OK
2024-06-04 11:39:46 - POST "/password/reset-request", parameters={}
2024-06-04 11:39:46 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 11:39:46 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@6137b222]
2024-06-04 11:39:50 - Using 'text/plain', given [*/*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 11:39:50 - Writing ["Password reset token: a3c717cb-5683-44ab-9012-e89210f51423"]
2024-06-04 11:39:50 - Completed 200 OK
2024-06-04 11:40:32 - POST "/password/reset", parameters={}
2024-06-04 11:40:32 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 11:40:32 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@74a217ab]
2024-06-04 11:40:32 - Using 'text/plain', given [*/*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 11:40:32 - Writing ["Password has been reset"]
2024-06-04 11:40:32 - Completed 200 OK
2024-06-04 11:40:54 - POST "/auth/login", parameters={}
2024-06-04 11:40:54 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 11:40:54 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrel123Full Name : nullPhone Number :  (truncated)...]
2024-06-04 11:40:54 - Username: devjahrel123 
2024-06-04 11:40:55 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 11:40:55 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@4ac209b1]
2024-06-04 11:40:55 - Completed 200 OK
2024-06-04 11:54:46 - Starting EcommerceManagementApplication using Java 21.0.1 with PID 1326 (/Users/user/Downloads/ecommerce-management/target/classes started by user in /Users/user/Downloads/ecommerce-management)
2024-06-04 11:54:46 - No active profile set, falling back to 1 default profile: "default"
2024-06-04 11:54:48 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-04 11:54:49 - Finished Spring Data repository scanning in 168 ms. Found 4 JPA repository interfaces.
2024-06-04 11:54:50 - Tomcat initialized with port 8080 (http)
2024-06-04 11:54:51 - Starting service [Tomcat]
2024-06-04 11:54:51 - Starting Servlet engine: [Apache Tomcat/10.1.18]
2024-06-04 11:54:51 - Initializing Spring embedded WebApplicationContext
2024-06-04 11:54:51 - Root WebApplicationContext: initialization completed in 4732 ms
2024-06-04 11:54:51 - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-04 11:54:51 - HHH000412: Hibernate ORM core version 6.4.1.Final
2024-06-04 11:54:52 - HHH000026: Second-level cache disabled
2024-06-04 11:54:52 - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-04 11:54:52 - HikariPool-1 - Starting...
2024-06-04 11:54:57 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@d9f5fce
2024-06-04 11:54:57 - HikariPool-1 - Start completed.
2024-06-04 11:55:07 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-06-04 11:55:10 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 11:55:16 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-06-04 11:55:16 - 15 mappings in 'requestMappingHandlerMapping'
2024-06-04 11:55:17 - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2024-06-04 11:55:17 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@365a4b9b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@240e61, org.springframework.security.web.context.SecurityContextHolderFilter@4a5c6b30, org.springframework.security.web.header.HeaderWriterFilter@2162598, org.springframework.web.filter.CorsFilter@76efa2b7, org.springframework.security.web.authentication.logout.LogoutFilter@5fb0a09e, org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter@4a778943, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ee76cf2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6662974a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2027d56f, org.springframework.security.web.session.SessionManagementFilter@27c49f54, org.springframework.security.web.access.ExceptionTranslationFilter@4bb644dc, org.springframework.security.web.access.intercept.AuthorizationFilter@7962a364]
2024-06-04 11:55:17 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2024-06-04 11:55:17 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2024-06-04 11:55:17 - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2024-06-04 11:55:18 - Tomcat started on port 8080 (http) with context path ''
2024-06-04 11:55:18 - Started EcommerceManagementApplication in 33.286 seconds (process running for 34.44)
2024-06-04 11:59:06 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-06-04 11:59:06 - Initializing Servlet 'dispatcherServlet'
2024-06-04 11:59:06 - Detected StandardServletMultipartResolver
2024-06-04 11:59:06 - Detected AcceptHeaderLocaleResolver
2024-06-04 11:59:06 - Detected FixedThemeResolver
2024-06-04 11:59:06 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@17b9c9ff
2024-06-04 11:59:06 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@352d3749
2024-06-04 11:59:06 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2024-06-04 11:59:06 - Completed initialization in 5 ms
2024-06-04 11:59:06 - POST "/auth/login", parameters={}
2024-06-04 11:59:06 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 11:59:06 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrel123Full Name : nullPhone Number :  (truncated)...]
2024-06-04 11:59:07 - Username: devjahrel123 
2024-06-04 11:59:07 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 11:59:07 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@6878b1c7]
2024-06-04 11:59:07 - Completed 200 OK
2024-06-04 11:59:46 - GET "/cart/list", parameters={}
2024-06-04 11:59:46 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 11:59:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 11:59:46 - Writing [[com.example.ecommercemanagement.model.Cart@dee7ce6, com.example.ecommercemanagement.model.Cart@2116 (truncated)...]
2024-06-04 11:59:46 - Completed 200 OK
2024-06-04 12:00:12 - POST "/auth/login", parameters={}
2024-06-04 12:00:12 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 12:00:12 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrel123Full Name : nullPhone Number :  (truncated)...]
2024-06-04 12:00:12 - Username: devjahrel123 
2024-06-04 12:00:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:00:12 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@783468c6]
2024-06-04 12:00:12 - Completed 200 OK
2024-06-04 12:00:12 - GET "/cart/list", parameters={}
2024-06-04 12:00:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:00:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:00:12 - Writing [[com.example.ecommercemanagement.model.Cart@4fc807d0, com.example.ecommercemanagement.model.Cart@1ce (truncated)...]
2024-06-04 12:00:12 - Completed 200 OK
2024-06-04 12:00:46 - GET "/cart/list", parameters={}
2024-06-04 12:00:46 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:00:46 - GET "/products/list", parameters={}
2024-06-04 12:00:46 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 12:00:47 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:00:47 - Writing [[com.example.ecommercemanagement.model.Cart@15c3409, com.example.ecommercemanagement.model.Cart@5d13 (truncated)...]
2024-06-04 12:00:47 - Completed 200 OK
2024-06-04 12:00:47 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:00:47 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 12:00:47 - Completed 200 OK
2024-06-04 12:00:53 - GET "/cart/list", parameters={}
2024-06-04 12:00:53 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:00:53 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:00:53 - Writing [[com.example.ecommercemanagement.model.Cart@480131ac, com.example.ecommercemanagement.model.Cart@3c5 (truncated)...]
2024-06-04 12:00:53 - Completed 200 OK
2024-06-04 12:00:56 - GET "/cart/list", parameters={}
2024-06-04 12:00:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:00:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:00:56 - Writing [[com.example.ecommercemanagement.model.Cart@5111d7ac, com.example.ecommercemanagement.model.Cart@592 (truncated)...]
2024-06-04 12:00:56 - Completed 200 OK
2024-06-04 12:00:59 - GET "/cart/list", parameters={}
2024-06-04 12:00:59 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:00:59 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:00:59 - Writing [[com.example.ecommercemanagement.model.Cart@fb17553, com.example.ecommercemanagement.model.Cart@6261 (truncated)...]
2024-06-04 12:00:59 - Completed 200 OK
2024-06-04 12:01:19 - GET "/cart/list", parameters={}
2024-06-04 12:01:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:01:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:01:19 - Writing [[com.example.ecommercemanagement.model.Cart@49f39483, com.example.ecommercemanagement.model.Cart@240 (truncated)...]
2024-06-04 12:01:19 - Completed 200 OK
2024-06-04 12:01:22 - GET "/cart/list", parameters={}
2024-06-04 12:01:22 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:01:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:01:22 - Writing [[com.example.ecommercemanagement.model.Cart@6335797a, com.example.ecommercemanagement.model.Cart@631 (truncated)...]
2024-06-04 12:01:22 - Completed 200 OK
2024-06-04 12:01:29 - POST "/auth/login", parameters={}
2024-06-04 12:01:29 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 12:01:29 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrel123Full Name : nullPhone Number :  (truncated)...]
2024-06-04 12:01:30 - Username: devjahrel123 
2024-06-04 12:01:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:01:30 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@4c0d14be]
2024-06-04 12:01:30 - Completed 200 OK
2024-06-04 12:01:30 - GET "/cart/list", parameters={}
2024-06-04 12:01:30 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:01:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:01:30 - Writing [[com.example.ecommercemanagement.model.Cart@30cf388d, com.example.ecommercemanagement.model.Cart@510 (truncated)...]
2024-06-04 12:01:30 - Completed 200 OK
2024-06-04 12:01:48 - GET "/cart/list", parameters={}
2024-06-04 12:01:48 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:01:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:01:48 - Writing [[com.example.ecommercemanagement.model.Cart@4569b47f, com.example.ecommercemanagement.model.Cart@7b6 (truncated)...]
2024-06-04 12:01:48 - Completed 200 OK
2024-06-04 12:01:51 - GET "/cart/list", parameters={}
2024-06-04 12:01:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:01:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:01:51 - Writing [[com.example.ecommercemanagement.model.Cart@74f5345e, com.example.ecommercemanagement.model.Cart@d7b (truncated)...]
2024-06-04 12:01:51 - Completed 200 OK
2024-06-04 12:01:59 - POST "/password/reset-request", parameters={}
2024-06-04 12:01:59 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:01:59 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@407732d0]
2024-06-04 12:02:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:02:03 - Writing ["Password reset token: 1bb28f52-da94-4cb4-bbfe-37bfd0fe368d"]
2024-06-04 12:02:03 - Completed 200 OK
2024-06-04 12:02:18 - POST "/password/reset", parameters={}
2024-06-04 12:02:18 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:02:18 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@4fd9afeb]
2024-06-04 12:02:18 - Failed to complete request: java.lang.IllegalArgumentException: rawPassword cannot be null
2024-06-04 12:02:18 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalArgumentException: rawPassword cannot be null] with root cause
java.lang.IllegalArgumentException: rawPassword cannot be null
	at org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(BCryptPasswordEncoder.java:107)
	at com.example.ecommercemanagement.service.AuthenticationService.resetPassword(AuthenticationService.java:118)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.resetPassword(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.resetPassword(PasswordResetController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:03:01 - POST "/password/reset-request", parameters={}
2024-06-04 12:03:01 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:03:01 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@15213c46]
2024-06-04 12:03:04 - Using 'text/plain', given [*/*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:03:04 - Writing ["Password reset token: 1ce9573f-6168-4cce-ae6f-240fd668fd8a"]
2024-06-04 12:03:04 - Completed 200 OK
2024-06-04 12:03:21 - POST "/password/reset", parameters={}
2024-06-04 12:03:21 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:03:21 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@701333d2]
2024-06-04 12:03:21 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:03:21 - Completed 400 BAD_REQUEST
2024-06-04 12:03:35 - POST "/password/reset", parameters={}
2024-06-04 12:03:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:03:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@78f83fe4]
2024-06-04 12:03:35 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:03:35 - Completed 400 BAD_REQUEST
2024-06-04 12:03:46 - POST "/password/reset", parameters={}
2024-06-04 12:03:46 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:03:46 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@759114be]
2024-06-04 12:03:47 - Using 'text/plain', given [*/*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:03:47 - Writing ["Password has been reset"]
2024-06-04 12:03:47 - Completed 200 OK
2024-06-04 12:09:26 - GET "/cart/list", parameters={}
2024-06-04 12:09:26 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:09:26 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:09:26 - Writing [[com.example.ecommercemanagement.model.Cart@6fc38341, com.example.ecommercemanagement.model.Cart@753 (truncated)...]
2024-06-04 12:09:26 - Completed 200 OK
2024-06-04 12:09:30 - GET "/cart/list", parameters={}
2024-06-04 12:09:30 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:09:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:09:30 - Writing [[com.example.ecommercemanagement.model.Cart@e2dbf61, com.example.ecommercemanagement.model.Cart@35f6 (truncated)...]
2024-06-04 12:09:30 - Completed 200 OK
2024-06-04 12:10:05 - GET "/cart/list", parameters={}
2024-06-04 12:10:05 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:10:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:10:05 - Writing [[com.example.ecommercemanagement.model.Cart@10b4a9b7, com.example.ecommercemanagement.model.Cart@38e (truncated)...]
2024-06-04 12:10:05 - Completed 200 OK
2024-06-04 12:13:00 - GET "/cart/list", parameters={}
2024-06-04 12:13:00 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:13:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:13:00 - Writing [[com.example.ecommercemanagement.model.Cart@7e726586, com.example.ecommercemanagement.model.Cart@8b4 (truncated)...]
2024-06-04 12:13:00 - Completed 200 OK
2024-06-04 12:13:04 - GET "/cart/list", parameters={}
2024-06-04 12:13:04 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:13:04 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:13:04 - Writing [[com.example.ecommercemanagement.model.Cart@61ea2330, com.example.ecommercemanagement.model.Cart@48d (truncated)...]
2024-06-04 12:13:04 - Completed 200 OK
2024-06-04 12:13:35 - POST "/password/reset-request", parameters={}
2024-06-04 12:13:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:13:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@20efdf00]
2024-06-04 12:13:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:13:38 - Writing ["Password reset token: 8a06c34e-aa3a-437e-b382-e78e516978be"]
2024-06-04 12:13:38 - Completed 200 OK
2024-06-04 12:15:44 - POST "/password/reset", parameters={}
2024-06-04 12:15:44 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:15:44 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@7c52baf9]
2024-06-04 12:15:44 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:15:44 - Completed 400 BAD_REQUEST
2024-06-04 12:18:06 - POST "/auth/login", parameters={}
2024-06-04 12:18:06 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 12:18:06 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : timothy123Full Name : nullPhone Number : nu (truncated)...]
2024-06-04 12:18:06 - Username: timothy123 
2024-06-04 12:18:06 - Password: timothy123 
2024-06-04 12:18:06 - User.getPassword: $2a$10$XprvW/6jM.TNg3FIM.wFzO6bKaXXJ.4b0UhfNH90cF2fZv1vilpVa
2024-06-04 12:18:06 - Using 'text/plain', given [*/*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:18:06 - Writing ["Invalid username or password"]
2024-06-04 12:18:06 - Completed 401 UNAUTHORIZED
2024-06-04 12:19:24 - POST "/password/reset-request", parameters={}
2024-06-04 12:19:24 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:19:24 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@44114276]
2024-06-04 12:19:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:19:27 - Writing ["Password reset token: 4c9de953-9c95-403a-88d7-364fa904b0eb"]
2024-06-04 12:19:27 - Completed 200 OK
2024-06-04 12:20:22 - POST "/password/reset", parameters={}
2024-06-04 12:20:22 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:20:22 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@3f2dc3d8]
2024-06-04 12:20:22 - Failed to complete request: java.lang.IllegalArgumentException: rawPassword cannot be null
2024-06-04 12:20:22 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalArgumentException: rawPassword cannot be null] with root cause
java.lang.IllegalArgumentException: rawPassword cannot be null
	at org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(BCryptPasswordEncoder.java:107)
	at com.example.ecommercemanagement.service.AuthenticationService.resetPassword(AuthenticationService.java:118)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.resetPassword(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.resetPassword(PasswordResetController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:22:04 - POST "/auth/register", parameters={}
2024-06-04 12:22:04 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#registerUser(RegistrationDTO)
2024-06-04 12:22:04 - Read "application/json;charset=UTF-8" to [Registration info: Email : nullpassword : dev11Full Name : nullPhone Number : nullCountry : nullAddr (truncated)...]
2024-06-04 12:22:05 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 12:22:05 - Writing [com.example.ecommercemanagement.model.ApplicationUser@24f12933]
2024-06-04 12:22:05 - Completed 200 OK
2024-06-04 12:22:13 - POST "/auth/register", parameters={}
2024-06-04 12:22:13 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#registerUser(RegistrationDTO)
2024-06-04 12:22:13 - Read "application/json;charset=UTF-8" to [Registration info: Email : nullpassword : dev11Full Name : nullPhone Number : nullCountry : nullAddr (truncated)...]
2024-06-04 12:22:13 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 12:22:13 - Writing [com.example.ecommercemanagement.model.ApplicationUser@4cd8a4f7]
2024-06-04 12:22:13 - Completed 200 OK
2024-06-04 12:22:23 - POST "/auth/register", parameters={}
2024-06-04 12:22:23 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#registerUser(RegistrationDTO)
2024-06-04 12:22:23 - Read "application/json;charset=UTF-8" to [Registration info: Email : k12@gmail.compassword : dev11Full Name : nullPhone Number : nullCountry : (truncated)...]
2024-06-04 12:22:23 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 12:22:23 - Writing [com.example.ecommercemanagement.model.ApplicationUser@2da422e0]
2024-06-04 12:22:23 - Completed 200 OK
2024-06-04 12:22:31 - POST "/auth/register", parameters={}
2024-06-04 12:22:31 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#registerUser(RegistrationDTO)
2024-06-04 12:22:31 - Read "application/json;charset=UTF-8" to [Registration info: Email : k12@gmail.compassword : dev11Full Name : nullPhone Number : nullCountry : (truncated)...]
2024-06-04 12:22:32 - SQL Error: 0, SQLState: 23505
2024-06-04 12:22:32 - ERROR: duplicate key value violates unique constraint "uk_r43af9ap4edm43mmtq01oddj6"
  Detail: Key (username)=(k12@gmail.com) already exists.
2024-06-04 12:22:32 - Failed to complete request: org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: duplicate key value violates unique constraint "uk_r43af9ap4edm43mmtq01oddj6"
  Detail: Key (username)=(k12@gmail.com) already exists.] [insert into users (address,city,country,full_name,password,phone_number,post_code,reset_token,reset_token_expiry,username,user_id) values (?,?,?,?,?,?,?,?,?,?,?)]; SQL [insert into users (address,city,country,full_name,password,phone_number,post_code,reset_token,reset_token_expiry,username,user_id) values (?,?,?,?,?,?,?,?,?,?,?)]; constraint [uk_r43af9ap4edm43mmtq01oddj6]
2024-06-04 12:22:32 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: duplicate key value violates unique constraint "uk_r43af9ap4edm43mmtq01oddj6"
  Detail: Key (username)=(k12@gmail.com) already exists.] [insert into users (address,city,country,full_name,password,phone_number,post_code,reset_token,reset_token_expiry,username,user_id) values (?,?,?,?,?,?,?,?,?,?,?)]; SQL [insert into users (address,city,country,full_name,password,phone_number,post_code,reset_token,reset_token_expiry,username,user_id) values (?,?,?,?,?,?,?,?,?,?,?)]; constraint [uk_r43af9ap4edm43mmtq01oddj6]] with root cause
org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "uk_r43af9ap4edm43mmtq01oddj6"
  Detail: Key (username)=(k12@gmail.com) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:40)
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:52)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2873)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:104)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:632)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:499)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:363)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1423)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:504)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2339)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1996)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:561)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:794)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.registerUser(<generated>)
	at com.example.ecommercemanagement.controller.AuthenticationController.registerUser(AuthenticationController.java:23)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:22:57 - GET "/cart/list", parameters={}
2024-06-04 12:22:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:22:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:22:57 - Writing [[com.example.ecommercemanagement.model.Cart@546ce9f0, com.example.ecommercemanagement.model.Cart@29b (truncated)...]
2024-06-04 12:22:57 - Completed 200 OK
2024-06-04 12:23:45 - POST "/password/reset-request", parameters={}
2024-06-04 12:23:45 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:23:45 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@654a73a2]
2024-06-04 12:23:47 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:23:47 - Writing ["Password reset token: 261077da-4305-4e81-8e02-817a5d013020"]
2024-06-04 12:23:47 - Completed 200 OK
2024-06-04 12:24:00 - POST "/password/reset", parameters={}
2024-06-04 12:24:00 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:24:00 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@5543c8fc]
2024-06-04 12:24:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:24:00 - Writing ["Password has been reset"]
2024-06-04 12:24:00 - Completed 200 OK
2024-06-04 12:24:36 - GET "/cart/list", parameters={}
2024-06-04 12:24:36 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:24:36 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:24:36 - Writing [[com.example.ecommercemanagement.model.Cart@66a861f3, com.example.ecommercemanagement.model.Cart@145 (truncated)...]
2024-06-04 12:24:36 - Completed 200 OK
2024-06-04 12:24:41 - POST "/auth/login", parameters={}
2024-06-04 12:24:41 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 12:24:41 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : test123Full Name : nullPhone Number : nullC (truncated)...]
2024-06-04 12:24:41 - Username: test123 
2024-06-04 12:24:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:24:41 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@32333fe]
2024-06-04 12:24:41 - Completed 200 OK
2024-06-04 12:24:42 - GET "/cart/list", parameters={}
2024-06-04 12:24:42 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:24:42 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:24:42 - Writing [[com.example.ecommercemanagement.model.Cart@4bca7798, com.example.ecommercemanagement.model.Cart@316 (truncated)...]
2024-06-04 12:24:42 - Completed 200 OK
2024-06-04 12:24:44 - GET "/cart/list", parameters={}
2024-06-04 12:24:44 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:24:44 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:24:44 - Writing [[com.example.ecommercemanagement.model.Cart@4fce71ac, com.example.ecommercemanagement.model.Cart@14a (truncated)...]
2024-06-04 12:24:44 - Completed 200 OK
2024-06-04 12:24:44 - GET "/cart/list", parameters={}
2024-06-04 12:24:44 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:24:44 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:24:44 - Writing [[com.example.ecommercemanagement.model.Cart@3ecf0971, com.example.ecommercemanagement.model.Cart@66a (truncated)...]
2024-06-04 12:24:44 - Completed 200 OK
2024-06-04 12:24:52 - GET "/cart/list", parameters={}
2024-06-04 12:24:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:24:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:24:52 - Writing [[com.example.ecommercemanagement.model.Cart@ee287b9, com.example.ecommercemanagement.model.Cart@406d (truncated)...]
2024-06-04 12:24:52 - Completed 200 OK
2024-06-04 12:25:26 - POST "/password/reset-request", parameters={}
2024-06-04 12:25:26 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:25:26 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@136a724f]
2024-06-04 12:25:26 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:25:26 - Completed 400 BAD_REQUEST
2024-06-04 12:42:33 - POST "/password/reset", parameters={}
2024-06-04 12:42:33 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:42:33 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@21446794]
2024-06-04 12:42:33 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:42:33 - Completed 400 BAD_REQUEST
2024-06-04 12:42:36 - POST "/password/reset-request", parameters={}
2024-06-04 12:42:36 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:42:36 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@15f9c4df]
2024-06-04 12:42:37 - Failed to complete request: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned
2024-06-04 12:42:37 - POST "/password/reset", parameters={}
2024-06-04 12:42:37 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned] with root cause
org.hibernate.NonUniqueResultException: Query did not return a unique result: 135 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy123.findByUsername(Unknown Source)
	at com.example.ecommercemanagement.service.AuthenticationService.intiatePasswordReset(AuthenticationService.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.intiatePasswordReset(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.passwordRequest(PasswordResetController.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:42:37 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:42:37 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@36a7b4eb]
2024-06-04 12:42:37 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:42:37 - Completed 400 BAD_REQUEST
2024-06-04 12:44:16 - GET "/cart/list", parameters={}
2024-06-04 12:44:16 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:44:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:44:16 - Writing [[com.example.ecommercemanagement.model.Cart@6f5aabea, com.example.ecommercemanagement.model.Cart@668 (truncated)...]
2024-06-04 12:44:16 - Completed 200 OK
2024-06-04 12:44:34 - GET "/cart/list", parameters={}
2024-06-04 12:44:34 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:44:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:44:34 - Writing [[com.example.ecommercemanagement.model.Cart@48eb02e7, com.example.ecommercemanagement.model.Cart@18b (truncated)...]
2024-06-04 12:44:34 - Completed 200 OK
2024-06-04 12:45:12 - POST "/password/reset-request", parameters={}
2024-06-04 12:45:12 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:45:12 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@2f61e397]
2024-06-04 12:45:12 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:45:12 - Completed 400 BAD_REQUEST
2024-06-04 12:45:15 - GET "/cart/list", parameters={}
2024-06-04 12:45:15 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:45:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:45:15 - Writing [[com.example.ecommercemanagement.model.Cart@5704c0d0, com.example.ecommercemanagement.model.Cart@3c6 (truncated)...]
2024-06-04 12:45:15 - Completed 200 OK
2024-06-04 12:45:20 - GET "/cart/list", parameters={}
2024-06-04 12:45:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:45:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:45:20 - Writing [[com.example.ecommercemanagement.model.Cart@7ea500c3, com.example.ecommercemanagement.model.Cart@1d0 (truncated)...]
2024-06-04 12:45:20 - Completed 200 OK
2024-06-04 12:45:26 - GET "/cart/list", parameters={}
2024-06-04 12:45:26 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:45:26 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:45:26 - Writing [[com.example.ecommercemanagement.model.Cart@7763cbb0, com.example.ecommercemanagement.model.Cart@413 (truncated)...]
2024-06-04 12:45:26 - Completed 200 OK
2024-06-04 12:45:27 - POST "/password/reset-request", parameters={}
2024-06-04 12:45:27 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:45:27 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@750f7249]
2024-06-04 12:45:27 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:45:27 - Completed 400 BAD_REQUEST
2024-06-04 12:46:17 - POST "/password/reset", parameters={}
2024-06-04 12:46:17 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:46:17 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@3647cc1b]
2024-06-04 12:46:17 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:46:17 - Completed 400 BAD_REQUEST
2024-06-04 12:46:20 - POST "/password/reset-request", parameters={}
2024-06-04 12:46:20 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:46:20 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@6fed4ae5]
2024-06-04 12:46:20 - Failed to complete request: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned
2024-06-04 12:46:20 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned] with root cause
org.hibernate.NonUniqueResultException: Query did not return a unique result: 135 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy123.findByUsername(Unknown Source)
	at com.example.ecommercemanagement.service.AuthenticationService.intiatePasswordReset(AuthenticationService.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.intiatePasswordReset(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.passwordRequest(PasswordResetController.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:46:20 - POST "/password/reset", parameters={}
2024-06-04 12:46:20 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:46:20 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@5734b65c]
2024-06-04 12:46:20 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:46:20 - Completed 400 BAD_REQUEST
2024-06-04 12:46:21 - POST "/password/reset-request", parameters={}
2024-06-04 12:46:21 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:46:21 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@4fc882ec]
2024-06-04 12:46:21 - Failed to complete request: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned
2024-06-04 12:46:21 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned] with root cause
org.hibernate.NonUniqueResultException: Query did not return a unique result: 135 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy123.findByUsername(Unknown Source)
	at com.example.ecommercemanagement.service.AuthenticationService.intiatePasswordReset(AuthenticationService.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.intiatePasswordReset(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.passwordRequest(PasswordResetController.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:46:24 - POST "/password/reset", parameters={}
2024-06-04 12:46:24 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:46:24 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@bed9f1a]
2024-06-04 12:46:24 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:46:24 - Completed 400 BAD_REQUEST
2024-06-04 12:46:25 - POST "/password/reset-request", parameters={}
2024-06-04 12:46:25 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:46:25 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@c53756a]
2024-06-04 12:46:25 - Failed to complete request: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned
2024-06-04 12:46:25 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned] with root cause
org.hibernate.NonUniqueResultException: Query did not return a unique result: 135 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy123.findByUsername(Unknown Source)
	at com.example.ecommercemanagement.service.AuthenticationService.intiatePasswordReset(AuthenticationService.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.intiatePasswordReset(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.passwordRequest(PasswordResetController.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:46:26 - POST "/password/reset", parameters={}
2024-06-04 12:46:26 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:46:26 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@52539da5]
2024-06-04 12:46:26 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:46:26 - Completed 400 BAD_REQUEST
2024-06-04 12:46:27 - POST "/password/reset-request", parameters={}
2024-06-04 12:46:27 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:46:27 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@67dfc169]
2024-06-04 12:46:27 - Failed to complete request: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned
2024-06-04 12:46:27 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned] with root cause
org.hibernate.NonUniqueResultException: Query did not return a unique result: 135 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy123.findByUsername(Unknown Source)
	at com.example.ecommercemanagement.service.AuthenticationService.intiatePasswordReset(AuthenticationService.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.intiatePasswordReset(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.passwordRequest(PasswordResetController.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:46:27 - POST "/password/reset", parameters={}
2024-06-04 12:46:27 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:46:27 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@433898ca]
2024-06-04 12:46:27 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:46:27 - Completed 400 BAD_REQUEST
2024-06-04 12:46:28 - POST "/password/reset-request", parameters={}
2024-06-04 12:46:28 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:46:28 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@5254d7fc]
2024-06-04 12:46:28 - Failed to complete request: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned
2024-06-04 12:46:28 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 135 results were returned] with root cause
org.hibernate.NonUniqueResultException: Query did not return a unique result: 135 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy123.findByUsername(Unknown Source)
	at com.example.ecommercemanagement.service.AuthenticationService.intiatePasswordReset(AuthenticationService.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.example.ecommercemanagement.service.AuthenticationService$$SpringCGLIB$$0.intiatePasswordReset(<generated>)
	at com.example.ecommercemanagement.controller.PasswordResetController.passwordRequest(PasswordResetController.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter.doFilterInternal(BearerTokenAuthenticationFilter.java:128)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-06-04 12:46:29 - POST "/password/reset", parameters={}
2024-06-04 12:46:29 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:46:29 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@7394680f]
2024-06-04 12:46:29 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:46:29 - Completed 400 BAD_REQUEST
2024-06-04 12:47:30 - GET "/cart/list", parameters={}
2024-06-04 12:47:30 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:47:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:47:30 - Writing [[com.example.ecommercemanagement.model.Cart@521d67a5, com.example.ecommercemanagement.model.Cart@12f (truncated)...]
2024-06-04 12:47:30 - Completed 200 OK
2024-06-04 12:48:48 - GET "/cart/list", parameters={}
2024-06-04 12:48:48 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:48:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:48:48 - Writing [[com.example.ecommercemanagement.model.Cart@43c10df3, com.example.ecommercemanagement.model.Cart@4c1 (truncated)...]
2024-06-04 12:48:48 - Completed 200 OK
2024-06-04 12:48:54 - GET "/cart/list", parameters={}
2024-06-04 12:48:54 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:48:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:48:54 - Writing [[com.example.ecommercemanagement.model.Cart@2a975027, com.example.ecommercemanagement.model.Cart@770 (truncated)...]
2024-06-04 12:48:54 - Completed 200 OK
2024-06-04 12:49:03 - GET "/cart/list", parameters={}
2024-06-04 12:49:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:49:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:49:03 - Writing [[com.example.ecommercemanagement.model.Cart@3d7ab269, com.example.ecommercemanagement.model.Cart@325 (truncated)...]
2024-06-04 12:49:03 - Completed 200 OK
2024-06-04 12:49:04 - GET "/cart/list", parameters={}
2024-06-04 12:49:04 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:49:04 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:49:04 - Writing [[com.example.ecommercemanagement.model.Cart@5b6fd3d1, com.example.ecommercemanagement.model.Cart@5d4 (truncated)...]
2024-06-04 12:49:04 - Completed 200 OK
2024-06-04 12:49:06 - GET "/cart/list", parameters={}
2024-06-04 12:49:06 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:49:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:49:06 - Writing [[com.example.ecommercemanagement.model.Cart@5202fb80, com.example.ecommercemanagement.model.Cart@5f5 (truncated)...]
2024-06-04 12:49:06 - Completed 200 OK
2024-06-04 12:49:08 - POST "/password/reset-request", parameters={}
2024-06-04 12:49:08 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:49:08 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@732e4df9]
2024-06-04 12:49:08 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:49:08 - Completed 400 BAD_REQUEST
2024-06-04 12:49:20 - POST "/password/reset", parameters={}
2024-06-04 12:49:20 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:49:20 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@5ca6a763]
2024-06-04 12:49:20 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:49:20 - Completed 400 BAD_REQUEST
2024-06-04 12:49:35 - GET "/cart/list", parameters={}
2024-06-04 12:49:35 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:49:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:49:35 - Writing [[com.example.ecommercemanagement.model.Cart@6caa6f9c, com.example.ecommercemanagement.model.Cart@6e7 (truncated)...]
2024-06-04 12:49:35 - Completed 200 OK
2024-06-04 12:49:37 - GET "/cart/list", parameters={}
2024-06-04 12:49:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:49:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:49:37 - Writing [[com.example.ecommercemanagement.model.Cart@5b2ff84, com.example.ecommercemanagement.model.Cart@4e7a (truncated)...]
2024-06-04 12:49:37 - Completed 200 OK
2024-06-04 12:49:40 - GET "/cart/list", parameters={}
2024-06-04 12:49:40 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:49:40 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:49:40 - Writing [[com.example.ecommercemanagement.model.Cart@73158c0f, com.example.ecommercemanagement.model.Cart@1c7 (truncated)...]
2024-06-04 12:49:40 - Completed 200 OK
2024-06-04 12:50:20 - GET "/cart/list", parameters={}
2024-06-04 12:50:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:50:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:50:20 - Writing [[com.example.ecommercemanagement.model.Cart@45c475df, com.example.ecommercemanagement.model.Cart@989 (truncated)...]
2024-06-04 12:50:20 - Completed 200 OK
2024-06-04 12:50:22 - GET "/cart/list", parameters={}
2024-06-04 12:50:22 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:50:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:50:22 - Writing [[com.example.ecommercemanagement.model.Cart@17067fd2, com.example.ecommercemanagement.model.Cart@546 (truncated)...]
2024-06-04 12:50:22 - Completed 200 OK
2024-06-04 12:50:27 - POST "/auth/login", parameters={}
2024-06-04 12:50:27 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 12:50:27 - Read "application/json;charset=UTF-8" to [Registration info: Email : password : Full Name : nullPhone Number : nullCountry : nullAddresss : nu (truncated)...]
2024-06-04 12:50:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:50:27 - Writing ["Invalid username or password"]
2024-06-04 12:50:27 - Completed 401 UNAUTHORIZED
2024-06-04 12:50:30 - GET "/cart/list", parameters={}
2024-06-04 12:50:30 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:50:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:50:30 - Writing [[com.example.ecommercemanagement.model.Cart@4361b6eb, com.example.ecommercemanagement.model.Cart@77a (truncated)...]
2024-06-04 12:50:30 - Completed 200 OK
2024-06-04 12:50:31 - POST "/password/reset-request", parameters={}
2024-06-04 12:50:31 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:50:31 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@298fd581]
2024-06-04 12:50:31 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:50:31 - Completed 400 BAD_REQUEST
2024-06-04 12:52:23 - GET "/cart/list", parameters={}
2024-06-04 12:52:23 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:52:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:52:23 - Writing [[com.example.ecommercemanagement.model.Cart@35ac9755, com.example.ecommercemanagement.model.Cart@51c (truncated)...]
2024-06-04 12:52:23 - Completed 200 OK
2024-06-04 12:54:55 - GET "/cart/list", parameters={}
2024-06-04 12:54:55 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:54:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:54:55 - Writing [[com.example.ecommercemanagement.model.Cart@78fae945, com.example.ecommercemanagement.model.Cart@63a (truncated)...]
2024-06-04 12:54:55 - Completed 200 OK
2024-06-04 12:54:57 - GET "/cart/list", parameters={}
2024-06-04 12:54:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:54:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:54:57 - Writing [[com.example.ecommercemanagement.model.Cart@7331d81a, com.example.ecommercemanagement.model.Cart@491 (truncated)...]
2024-06-04 12:54:57 - Completed 200 OK
2024-06-04 12:55:02 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:02 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:02 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@1de468b7]
2024-06-04 12:55:02 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:02 - Completed 400 BAD_REQUEST
2024-06-04 12:55:03 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:03 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:03 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@d55fcef]
2024-06-04 12:55:03 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:03 - Completed 400 BAD_REQUEST
2024-06-04 12:55:04 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:04 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:04 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@10b19ddf]
2024-06-04 12:55:04 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:04 - Completed 400 BAD_REQUEST
2024-06-04 12:55:06 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:06 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:06 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@4f905a08]
2024-06-04 12:55:06 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:06 - Completed 400 BAD_REQUEST
2024-06-04 12:55:07 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:07 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:07 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@7188649a]
2024-06-04 12:55:07 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:07 - Completed 400 BAD_REQUEST
2024-06-04 12:55:07 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:07 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:07 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@5d16fb74]
2024-06-04 12:55:07 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:07 - Completed 400 BAD_REQUEST
2024-06-04 12:55:08 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:08 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:08 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@2d30c395]
2024-06-04 12:55:08 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:08 - Completed 400 BAD_REQUEST
2024-06-04 12:55:08 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:08 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:08 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@4d5344e]
2024-06-04 12:55:08 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:08 - Completed 400 BAD_REQUEST
2024-06-04 12:55:09 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:09 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:09 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@fe9e019]
2024-06-04 12:55:09 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:09 - Completed 400 BAD_REQUEST
2024-06-04 12:55:10 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:10 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:10 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@62778882]
2024-06-04 12:55:10 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:10 - Completed 400 BAD_REQUEST
2024-06-04 12:55:10 - GET "/cart/list", parameters={}
2024-06-04 12:55:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:55:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:55:10 - Writing [[com.example.ecommercemanagement.model.Cart@53f982c6, com.example.ecommercemanagement.model.Cart@39c (truncated)...]
2024-06-04 12:55:10 - Completed 200 OK
2024-06-04 12:55:12 - GET "/cart/list", parameters={}
2024-06-04 12:55:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:55:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:55:12 - Writing [[com.example.ecommercemanagement.model.Cart@4ceb7f26, com.example.ecommercemanagement.model.Cart@6b4 (truncated)...]
2024-06-04 12:55:12 - Completed 200 OK
2024-06-04 12:55:13 - POST "/password/reset-request", parameters={}
2024-06-04 12:55:13 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:55:13 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@cd9ab0b]
2024-06-04 12:55:13 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:55:13 - Completed 400 BAD_REQUEST
2024-06-04 12:56:05 - POST "/password/reset-request", parameters={}
2024-06-04 12:56:05 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:56:05 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@50b5b432]
2024-06-04 12:56:05 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:56:05 - Completed 400 BAD_REQUEST
2024-06-04 12:56:05 - POST "/password/reset-request", parameters={}
2024-06-04 12:56:05 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:56:05 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@4a4db482]
2024-06-04 12:56:05 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:56:05 - Completed 400 BAD_REQUEST
2024-06-04 12:56:05 - POST "/password/reset-request", parameters={}
2024-06-04 12:56:05 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:56:05 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@1556ba53]
2024-06-04 12:56:05 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:56:05 - Completed 400 BAD_REQUEST
2024-06-04 12:56:06 - POST "/password/reset-request", parameters={}
2024-06-04 12:56:06 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:56:06 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@1f6e074e]
2024-06-04 12:56:06 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:56:06 - Completed 400 BAD_REQUEST
2024-06-04 12:56:44 - POST "/password/reset-request", parameters={}
2024-06-04 12:56:44 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:56:44 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@32b4b63e]
2024-06-04 12:56:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:56:46 - Writing ["Password reset token: 7f22fe00-73fd-4171-89b0-bb37a98c52e5"]
2024-06-04 12:56:46 - Completed 200 OK
2024-06-04 12:57:22 - POST "/password/reset-request", parameters={}
2024-06-04 12:57:22 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:57:22 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@442918f5]
2024-06-04 12:57:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 12:57:24 - Writing ["Password reset token: 75457cba-e53a-4dc1-9333-6734f9d4130e"]
2024-06-04 12:57:24 - Completed 200 OK
2024-06-04 12:57:25 - POST "/password/reset", parameters={}
2024-06-04 12:57:25 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:25 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@d6198]
2024-06-04 12:57:25 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:25 - Completed 400 BAD_REQUEST
2024-06-04 12:57:27 - POST "/password/reset", parameters={}
2024-06-04 12:57:27 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:27 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@5ba6227a]
2024-06-04 12:57:27 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:27 - Completed 400 BAD_REQUEST
2024-06-04 12:57:29 - POST "/password/reset", parameters={}
2024-06-04 12:57:29 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:29 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@4f0e6e07]
2024-06-04 12:57:29 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:29 - Completed 400 BAD_REQUEST
2024-06-04 12:57:30 - POST "/password/reset", parameters={}
2024-06-04 12:57:30 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:30 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@1139d264]
2024-06-04 12:57:30 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:30 - Completed 400 BAD_REQUEST
2024-06-04 12:57:31 - POST "/password/reset", parameters={}
2024-06-04 12:57:31 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:31 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@59ea23d2]
2024-06-04 12:57:31 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:31 - Completed 400 BAD_REQUEST
2024-06-04 12:57:31 - POST "/password/reset", parameters={}
2024-06-04 12:57:31 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:31 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@2499db4d]
2024-06-04 12:57:31 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:31 - Completed 400 BAD_REQUEST
2024-06-04 12:57:31 - POST "/password/reset", parameters={}
2024-06-04 12:57:31 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:31 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@32f81d05]
2024-06-04 12:57:31 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:31 - Completed 400 BAD_REQUEST
2024-06-04 12:57:32 - POST "/password/reset", parameters={}
2024-06-04 12:57:32 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:32 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@57b7486a]
2024-06-04 12:57:32 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:32 - Completed 400 BAD_REQUEST
2024-06-04 12:57:32 - POST "/password/reset", parameters={}
2024-06-04 12:57:32 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:32 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@4474158]
2024-06-04 12:57:32 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:32 - Completed 400 BAD_REQUEST
2024-06-04 12:57:32 - POST "/password/reset", parameters={}
2024-06-04 12:57:32 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:32 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@60a4c4e0]
2024-06-04 12:57:32 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:32 - Completed 400 BAD_REQUEST
2024-06-04 12:57:32 - POST "/password/reset", parameters={}
2024-06-04 12:57:32 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:32 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@48e26c8e]
2024-06-04 12:57:32 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:32 - Completed 400 BAD_REQUEST
2024-06-04 12:57:33 - POST "/password/reset", parameters={}
2024-06-04 12:57:33 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:33 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@5e4ae2c5]
2024-06-04 12:57:33 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:33 - Completed 400 BAD_REQUEST
2024-06-04 12:57:34 - POST "/password/reset", parameters={}
2024-06-04 12:57:34 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:34 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@27390996]
2024-06-04 12:57:34 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:34 - Completed 400 BAD_REQUEST
2024-06-04 12:57:34 - POST "/password/reset", parameters={}
2024-06-04 12:57:34 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:34 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@5ece8ef9]
2024-06-04 12:57:34 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:34 - Completed 400 BAD_REQUEST
2024-06-04 12:57:34 - POST "/password/reset", parameters={}
2024-06-04 12:57:34 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:34 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@6a3b2c74]
2024-06-04 12:57:34 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:34 - Completed 400 BAD_REQUEST
2024-06-04 12:57:34 - POST "/password/reset", parameters={}
2024-06-04 12:57:34 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:34 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@292c97fe]
2024-06-04 12:57:34 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:34 - Completed 400 BAD_REQUEST
2024-06-04 12:57:35 - POST "/password/reset", parameters={}
2024-06-04 12:57:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@7d6593e4]
2024-06-04 12:57:35 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:35 - Completed 400 BAD_REQUEST
2024-06-04 12:57:35 - POST "/password/reset", parameters={}
2024-06-04 12:57:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@696dd44a]
2024-06-04 12:57:35 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:35 - Completed 400 BAD_REQUEST
2024-06-04 12:57:35 - POST "/password/reset", parameters={}
2024-06-04 12:57:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@b9320a6]
2024-06-04 12:57:35 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:35 - Completed 400 BAD_REQUEST
2024-06-04 12:57:35 - POST "/password/reset", parameters={}
2024-06-04 12:57:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@491c2b9]
2024-06-04 12:57:35 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:35 - Completed 400 BAD_REQUEST
2024-06-04 12:57:35 - POST "/password/reset", parameters={}
2024-06-04 12:57:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@4caf67e]
2024-06-04 12:57:35 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:35 - Completed 400 BAD_REQUEST
2024-06-04 12:57:35 - POST "/password/reset", parameters={}
2024-06-04 12:57:35 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 12:57:35 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@1c6b84d2]
2024-06-04 12:57:35 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 12:57:35 - Completed 400 BAD_REQUEST
2024-06-04 12:57:39 - GET "/cart/list", parameters={}
2024-06-04 12:57:39 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:57:39 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:57:39 - Writing [[com.example.ecommercemanagement.model.Cart@14a6ce36, com.example.ecommercemanagement.model.Cart@46a (truncated)...]
2024-06-04 12:57:39 - Completed 200 OK
2024-06-04 12:57:40 - POST "/password/reset-request", parameters={}
2024-06-04 12:57:40 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 12:57:40 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@20b3033d]
2024-06-04 12:57:40 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 12:57:40 - Completed 400 BAD_REQUEST
2024-06-04 12:57:46 - GET "/cart/list", parameters={}
2024-06-04 12:57:46 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:57:47 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:57:47 - Writing [[com.example.ecommercemanagement.model.Cart@587c5490, com.example.ecommercemanagement.model.Cart@506 (truncated)...]
2024-06-04 12:57:47 - Completed 200 OK
2024-06-04 12:57:49 - GET "/cart/list", parameters={}
2024-06-04 12:57:49 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 12:57:49 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 12:57:49 - Writing [[com.example.ecommercemanagement.model.Cart@271ba548, com.example.ecommercemanagement.model.Cart@a51 (truncated)...]
2024-06-04 12:57:49 - Completed 200 OK
2024-06-04 13:02:38 - POST "/password/reset-request", parameters={}
2024-06-04 13:02:38 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:02:38 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@ee2ae2f]
2024-06-04 13:02:40 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:02:40 - Writing ["Password reset token: 14fac0c1-5ec0-4262-83a9-fafb6394f32e"]
2024-06-04 13:02:40 - Completed 200 OK
2024-06-04 13:02:44 - POST "/password/reset", parameters={}
2024-06-04 13:02:44 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:02:44 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@29545f2d]
2024-06-04 13:02:44 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 13:02:44 - Completed 400 BAD_REQUEST
2024-06-04 13:03:00 - GET "/cart/list", parameters={}
2024-06-04 13:03:00 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:03:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:03:00 - Writing [[com.example.ecommercemanagement.model.Cart@7dab8c37, com.example.ecommercemanagement.model.Cart@299 (truncated)...]
2024-06-04 13:03:00 - Completed 200 OK
2024-06-04 13:03:02 - GET "/cart/list", parameters={}
2024-06-04 13:03:02 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:03:02 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:03:02 - Writing [[com.example.ecommercemanagement.model.Cart@f5912e0, com.example.ecommercemanagement.model.Cart@6ba0 (truncated)...]
2024-06-04 13:03:02 - Completed 200 OK
2024-06-04 13:03:07 - GET "/cart/list", parameters={}
2024-06-04 13:03:07 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:03:07 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:03:07 - Writing [[com.example.ecommercemanagement.model.Cart@1b0206e1, com.example.ecommercemanagement.model.Cart@522 (truncated)...]
2024-06-04 13:03:07 - Completed 200 OK
2024-06-04 13:03:10 - GET "/cart/list", parameters={}
2024-06-04 13:03:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:03:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:03:10 - Writing [[com.example.ecommercemanagement.model.Cart@38f3f4c0, com.example.ecommercemanagement.model.Cart@7db (truncated)...]
2024-06-04 13:03:10 - Completed 200 OK
2024-06-04 13:03:14 - POST "/password/reset-request", parameters={}
2024-06-04 13:03:14 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:03:14 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@756b56a5]
2024-06-04 13:03:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:03:16 - Writing ["Password reset token: 2f0ab69d-fb38-4c86-80ba-dc82b985724f"]
2024-06-04 13:03:16 - Completed 200 OK
2024-06-04 13:08:12 - POST "/password/reset", parameters={}
2024-06-04 13:08:12 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:08:12 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@2acbdbd5]
2024-06-04 13:08:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:08:12 - Writing ["Password has been reset"]
2024-06-04 13:08:12 - Completed 200 OK
2024-06-04 13:09:50 - GET "/cart/list", parameters={}
2024-06-04 13:09:50 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:09:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:09:50 - Writing [[com.example.ecommercemanagement.model.Cart@1d643de5, com.example.ecommercemanagement.model.Cart@42a (truncated)...]
2024-06-04 13:09:50 - Completed 200 OK
2024-06-04 13:09:52 - GET "/cart/list", parameters={}
2024-06-04 13:09:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:09:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:09:52 - Writing [[com.example.ecommercemanagement.model.Cart@7b7d4396, com.example.ecommercemanagement.model.Cart@434 (truncated)...]
2024-06-04 13:09:52 - Completed 200 OK
2024-06-04 13:09:56 - POST "/password/reset-request", parameters={}
2024-06-04 13:09:56 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:09:56 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@3a23f1fa]
2024-06-04 13:10:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:10:00 - Writing ["Password reset token: 08df0b28-2547-4604-ba9e-e1a7e06513b9"]
2024-06-04 13:10:00 - Completed 200 OK
2024-06-04 13:10:12 - GET "/cart/list", parameters={}
2024-06-04 13:10:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:10:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:10:12 - Writing [[com.example.ecommercemanagement.model.Cart@6b136836, com.example.ecommercemanagement.model.Cart@4cf (truncated)...]
2024-06-04 13:10:12 - Completed 200 OK
2024-06-04 13:10:12 - GET "/cart/list", parameters={}
2024-06-04 13:10:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:10:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:10:12 - Writing [[com.example.ecommercemanagement.model.Cart@1ce55848, com.example.ecommercemanagement.model.Cart@6c8 (truncated)...]
2024-06-04 13:10:12 - Completed 200 OK
2024-06-04 13:10:32 - GET "/cart/list", parameters={}
2024-06-04 13:10:32 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:10:32 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:10:32 - Writing [[com.example.ecommercemanagement.model.Cart@543ccf52, com.example.ecommercemanagement.model.Cart@64b (truncated)...]
2024-06-04 13:10:32 - Completed 200 OK
2024-06-04 13:10:39 - GET "/cart/list", parameters={}
2024-06-04 13:10:39 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:10:39 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:10:39 - Writing [[com.example.ecommercemanagement.model.Cart@14aa6133, com.example.ecommercemanagement.model.Cart@7b5 (truncated)...]
2024-06-04 13:10:39 - Completed 200 OK
2024-06-04 13:10:44 - POST "/password/reset-request", parameters={}
2024-06-04 13:10:44 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:10:44 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@63f93430]
2024-06-04 13:10:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:10:46 - Writing ["Password reset token: 7374f310-2bb0-4612-8ab4-d96deb400faf"]
2024-06-04 13:10:46 - Completed 200 OK
2024-06-04 13:10:56 - GET "/cart/list", parameters={}
2024-06-04 13:10:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:10:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:10:56 - Writing [[com.example.ecommercemanagement.model.Cart@9881be1, com.example.ecommercemanagement.model.Cart@54a0 (truncated)...]
2024-06-04 13:10:56 - Completed 200 OK
2024-06-04 13:10:56 - GET "/cart/list", parameters={}
2024-06-04 13:10:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:10:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:10:56 - Writing [[com.example.ecommercemanagement.model.Cart@49debc2e, com.example.ecommercemanagement.model.Cart@306 (truncated)...]
2024-06-04 13:10:56 - Completed 200 OK
2024-06-04 13:16:21 - GET "/cart/list", parameters={}
2024-06-04 13:16:21 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:16:21 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:16:21 - Writing [[com.example.ecommercemanagement.model.Cart@10a498de, com.example.ecommercemanagement.model.Cart@60d (truncated)...]
2024-06-04 13:16:21 - Completed 200 OK
2024-06-04 13:16:23 - GET "/cart/list", parameters={}
2024-06-04 13:16:23 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:16:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:16:23 - Writing [[com.example.ecommercemanagement.model.Cart@31daf5b7, com.example.ecommercemanagement.model.Cart@3fc (truncated)...]
2024-06-04 13:16:23 - Completed 200 OK
2024-06-04 13:16:27 - POST "/password/reset-request", parameters={}
2024-06-04 13:16:27 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:16:27 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@d8a479]
2024-06-04 13:16:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:16:30 - Writing ["Password reset token: a90ce660-3df9-4302-afa0-a357e8106c63"]
2024-06-04 13:16:30 - Completed 200 OK
2024-06-04 13:16:45 - POST "/password/reset", parameters={}
2024-06-04 13:16:45 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:16:45 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@493336c7]
2024-06-04 13:16:45 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "Invalid token"]
2024-06-04 13:16:45 - Completed 400 BAD_REQUEST
2024-06-04 13:16:56 - GET "/cart/list", parameters={}
2024-06-04 13:16:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:16:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:16:56 - Writing [[com.example.ecommercemanagement.model.Cart@ff7b1, com.example.ecommercemanagement.model.Cart@78d372 (truncated)...]
2024-06-04 13:16:56 - Completed 200 OK
2024-06-04 13:16:57 - GET "/cart/list", parameters={}
2024-06-04 13:16:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:16:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:16:57 - Writing [[com.example.ecommercemanagement.model.Cart@5d70d22a, com.example.ecommercemanagement.model.Cart@65a (truncated)...]
2024-06-04 13:16:57 - Completed 200 OK
2024-06-04 13:17:33 - GET "/cart/list", parameters={}
2024-06-04 13:17:33 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:17:33 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:17:33 - Writing [[com.example.ecommercemanagement.model.Cart@6232c193, com.example.ecommercemanagement.model.Cart@565 (truncated)...]
2024-06-04 13:17:33 - Completed 200 OK
2024-06-04 13:17:37 - GET "/cart/list", parameters={}
2024-06-04 13:17:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:17:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:17:37 - Writing [[com.example.ecommercemanagement.model.Cart@4241d55e, com.example.ecommercemanagement.model.Cart@251 (truncated)...]
2024-06-04 13:17:37 - Completed 200 OK
2024-06-04 13:17:44 - GET "/cart/list", parameters={}
2024-06-04 13:17:44 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:17:44 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:17:44 - Writing [[com.example.ecommercemanagement.model.Cart@3131889f, com.example.ecommercemanagement.model.Cart@331 (truncated)...]
2024-06-04 13:17:44 - Completed 200 OK
2024-06-04 13:17:46 - POST "/password/reset-request", parameters={}
2024-06-04 13:17:46 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:17:46 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@57c02193]
2024-06-04 13:17:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:17:48 - Writing ["Password reset token: 97a32bd9-da5c-4ed2-876c-6387a3cf19f8"]
2024-06-04 13:17:48 - Completed 200 OK
2024-06-04 13:17:55 - POST "/password/reset", parameters={}
2024-06-04 13:17:55 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:17:55 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@61037ab2]
2024-06-04 13:17:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:17:55 - Writing ["Password has been reset"]
2024-06-04 13:17:55 - Completed 200 OK
2024-06-04 13:18:00 - GET "/cart/list", parameters={}
2024-06-04 13:18:00 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:18:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:18:00 - Writing [[com.example.ecommercemanagement.model.Cart@7f5b8e1a, com.example.ecommercemanagement.model.Cart@32d (truncated)...]
2024-06-04 13:18:00 - Completed 200 OK
2024-06-04 13:18:01 - GET "/cart/list", parameters={}
2024-06-04 13:18:01 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:18:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:18:01 - Writing [[com.example.ecommercemanagement.model.Cart@695e1971, com.example.ecommercemanagement.model.Cart@4af (truncated)...]
2024-06-04 13:18:01 - Completed 200 OK
2024-06-04 13:21:25 - GET "/cart/list", parameters={}
2024-06-04 13:21:25 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:21:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:21:25 - Writing [[com.example.ecommercemanagement.model.Cart@57f2b054, com.example.ecommercemanagement.model.Cart@195 (truncated)...]
2024-06-04 13:21:25 - Completed 200 OK
2024-06-04 13:21:35 - GET "/cart/list", parameters={}
2024-06-04 13:21:35 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:21:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:21:35 - Writing [[com.example.ecommercemanagement.model.Cart@1267a751, com.example.ecommercemanagement.model.Cart@220 (truncated)...]
2024-06-04 13:21:35 - Completed 200 OK
2024-06-04 13:21:38 - GET "/cart/list", parameters={}
2024-06-04 13:21:38 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:21:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:21:38 - Writing [[com.example.ecommercemanagement.model.Cart@1c27fbb2, com.example.ecommercemanagement.model.Cart@21a (truncated)...]
2024-06-04 13:21:38 - Completed 200 OK
2024-06-04 13:21:41 - POST "/password/reset-request", parameters={}
2024-06-04 13:21:41 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:21:41 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@732c11e0]
2024-06-04 13:21:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:21:43 - Writing ["Password reset token: e0f96492-ff40-4603-ba6d-d2e21d1acfc4"]
2024-06-04 13:21:43 - Completed 200 OK
2024-06-04 13:21:54 - POST "/password/reset", parameters={}
2024-06-04 13:21:54 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:21:54 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@36fc1529]
2024-06-04 13:21:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:21:54 - Writing ["Password has been reset"]
2024-06-04 13:21:54 - Completed 200 OK
2024-06-04 13:21:56 - GET "/cart/list", parameters={}
2024-06-04 13:21:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:21:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:21:56 - Writing [[com.example.ecommercemanagement.model.Cart@55a60cc5, com.example.ecommercemanagement.model.Cart@6c8 (truncated)...]
2024-06-04 13:21:56 - Completed 200 OK
2024-06-04 13:21:57 - GET "/cart/list", parameters={}
2024-06-04 13:21:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:21:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:21:57 - Writing [[com.example.ecommercemanagement.model.Cart@5faecb44, com.example.ecommercemanagement.model.Cart@1c4 (truncated)...]
2024-06-04 13:21:57 - Completed 200 OK
2024-06-04 13:22:58 - GET "/cart/list", parameters={}
2024-06-04 13:22:58 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:22:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:22:58 - Writing [[com.example.ecommercemanagement.model.Cart@506e2834, com.example.ecommercemanagement.model.Cart@2d5 (truncated)...]
2024-06-04 13:22:58 - Completed 200 OK
2024-06-04 13:23:01 - GET "/cart/list", parameters={}
2024-06-04 13:23:01 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:23:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:23:01 - Writing [[com.example.ecommercemanagement.model.Cart@8d7d93e, com.example.ecommercemanagement.model.Cart@5175 (truncated)...]
2024-06-04 13:23:01 - Completed 200 OK
2024-06-04 13:23:05 - POST "/password/reset-request", parameters={}
2024-06-04 13:23:05 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:23:05 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@68cc49d8]
2024-06-04 13:23:07 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:23:07 - Writing ["Password reset token: 36f34def-b167-4db2-af83-7162f4727ffe"]
2024-06-04 13:23:07 - Completed 200 OK
2024-06-04 13:23:18 - POST "/password/reset", parameters={}
2024-06-04 13:23:18 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:23:18 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@2055523]
2024-06-04 13:23:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:23:18 - Writing ["Password has been reset"]
2024-06-04 13:23:18 - Completed 200 OK
2024-06-04 13:23:21 - GET "/cart/list", parameters={}
2024-06-04 13:23:21 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:23:21 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:23:21 - Writing [[com.example.ecommercemanagement.model.Cart@699bcb7a, com.example.ecommercemanagement.model.Cart@776 (truncated)...]
2024-06-04 13:23:21 - Completed 200 OK
2024-06-04 13:23:22 - GET "/cart/list", parameters={}
2024-06-04 13:23:22 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:23:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:23:22 - Writing [[com.example.ecommercemanagement.model.Cart@52cfec5c, com.example.ecommercemanagement.model.Cart@4bc (truncated)...]
2024-06-04 13:23:22 - Completed 200 OK
2024-06-04 13:25:19 - GET "/cart/list", parameters={}
2024-06-04 13:25:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:25:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:25:19 - Writing [[com.example.ecommercemanagement.model.Cart@4883d6dd, com.example.ecommercemanagement.model.Cart@77d (truncated)...]
2024-06-04 13:25:19 - Completed 200 OK
2024-06-04 13:25:24 - GET "/cart/list", parameters={}
2024-06-04 13:25:24 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:25:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:25:24 - Writing [[com.example.ecommercemanagement.model.Cart@68160cbd, com.example.ecommercemanagement.model.Cart@2b5 (truncated)...]
2024-06-04 13:25:24 - Completed 200 OK
2024-06-04 13:25:27 - GET "/cart/list", parameters={}
2024-06-04 13:25:27 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:25:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:25:27 - Writing [[com.example.ecommercemanagement.model.Cart@519d26eb, com.example.ecommercemanagement.model.Cart@125 (truncated)...]
2024-06-04 13:25:27 - Completed 200 OK
2024-06-04 13:25:28 - POST "/password/reset-request", parameters={}
2024-06-04 13:25:28 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:25:28 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@2e86c367]
2024-06-04 13:25:28 - Resolved [org.springframework.web.server.ResponseStatusException: 400 BAD_REQUEST "User not found"]
2024-06-04 13:25:28 - Completed 400 BAD_REQUEST
2024-06-04 13:25:32 - GET "/cart/list", parameters={}
2024-06-04 13:25:32 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:25:32 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:25:32 - Writing [[com.example.ecommercemanagement.model.Cart@5f54cab1, com.example.ecommercemanagement.model.Cart@3a2 (truncated)...]
2024-06-04 13:25:32 - Completed 200 OK
2024-06-04 13:25:34 - GET "/cart/list", parameters={}
2024-06-04 13:25:34 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:25:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:25:34 - Writing [[com.example.ecommercemanagement.model.Cart@ea8b7da, com.example.ecommercemanagement.model.Cart@6858 (truncated)...]
2024-06-04 13:25:34 - Completed 200 OK
2024-06-04 13:27:49 - GET "/cart/list", parameters={}
2024-06-04 13:27:49 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:27:49 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:27:49 - Writing [[com.example.ecommercemanagement.model.Cart@3d6c1725, com.example.ecommercemanagement.model.Cart@432 (truncated)...]
2024-06-04 13:27:49 - Completed 200 OK
2024-06-04 13:27:52 - GET "/cart/list", parameters={}
2024-06-04 13:27:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:27:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:27:52 - Writing [[com.example.ecommercemanagement.model.Cart@5300af20, com.example.ecommercemanagement.model.Cart@286 (truncated)...]
2024-06-04 13:27:52 - Completed 200 OK
2024-06-04 13:28:05 - GET "/cart/list", parameters={}
2024-06-04 13:28:05 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:28:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:28:05 - Writing [[com.example.ecommercemanagement.model.Cart@388f08d9, com.example.ecommercemanagement.model.Cart@79e (truncated)...]
2024-06-04 13:28:05 - Completed 200 OK
2024-06-04 13:28:10 - GET "/cart/list", parameters={}
2024-06-04 13:28:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:28:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:28:10 - Writing [[com.example.ecommercemanagement.model.Cart@57a791dd, com.example.ecommercemanagement.model.Cart@650 (truncated)...]
2024-06-04 13:28:10 - Completed 200 OK
2024-06-04 13:28:13 - GET "/cart/list", parameters={}
2024-06-04 13:28:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:28:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:28:13 - Writing [[com.example.ecommercemanagement.model.Cart@ddc9253, com.example.ecommercemanagement.model.Cart@7154 (truncated)...]
2024-06-04 13:28:13 - Completed 200 OK
2024-06-04 13:28:31 - POST "/password/reset-request", parameters={}
2024-06-04 13:28:31 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:28:31 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@24fd01d1]
2024-06-04 13:28:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:28:34 - Writing ["Password reset token: 0a5c79c7-4044-4771-a663-3190a5bd1b3b"]
2024-06-04 13:28:34 - Completed 200 OK
2024-06-04 13:28:42 - POST "/password/reset", parameters={}
2024-06-04 13:28:42 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:28:42 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@6a154310]
2024-06-04 13:28:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:28:43 - Writing ["Password has been reset"]
2024-06-04 13:28:43 - Completed 200 OK
2024-06-04 13:28:51 - GET "/cart/list", parameters={}
2024-06-04 13:28:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:28:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:28:51 - Writing [[com.example.ecommercemanagement.model.Cart@4bbcc6e4, com.example.ecommercemanagement.model.Cart@7fc (truncated)...]
2024-06-04 13:28:51 - Completed 200 OK
2024-06-04 13:28:52 - GET "/cart/list", parameters={}
2024-06-04 13:28:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:28:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:28:52 - Writing [[com.example.ecommercemanagement.model.Cart@1011e780, com.example.ecommercemanagement.model.Cart@561 (truncated)...]
2024-06-04 13:28:52 - Completed 200 OK
2024-06-04 13:29:52 - GET "/cart/list", parameters={}
2024-06-04 13:29:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:29:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:29:52 - Writing [[com.example.ecommercemanagement.model.Cart@6feb35b8, com.example.ecommercemanagement.model.Cart@218 (truncated)...]
2024-06-04 13:29:52 - Completed 200 OK
2024-06-04 13:30:02 - GET "/cart/list", parameters={}
2024-06-04 13:30:02 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:30:02 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:30:02 - Writing [[com.example.ecommercemanagement.model.Cart@69fff5d3, com.example.ecommercemanagement.model.Cart@296 (truncated)...]
2024-06-04 13:30:02 - Completed 200 OK
2024-06-04 13:30:05 - GET "/cart/list", parameters={}
2024-06-04 13:30:05 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:30:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:30:05 - Writing [[com.example.ecommercemanagement.model.Cart@2ab76cdb, com.example.ecommercemanagement.model.Cart@541 (truncated)...]
2024-06-04 13:30:05 - Completed 200 OK
2024-06-04 13:30:07 - GET "/cart/list", parameters={}
2024-06-04 13:30:07 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:30:07 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:30:07 - Writing [[com.example.ecommercemanagement.model.Cart@264111b, com.example.ecommercemanagement.model.Cart@7769 (truncated)...]
2024-06-04 13:30:07 - Completed 200 OK
2024-06-04 13:30:09 - GET "/cart/list", parameters={}
2024-06-04 13:30:09 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:30:09 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:30:09 - Writing [[com.example.ecommercemanagement.model.Cart@235454fe, com.example.ecommercemanagement.model.Cart@25f (truncated)...]
2024-06-04 13:30:09 - Completed 200 OK
2024-06-04 13:30:12 - POST "/password/reset-request", parameters={}
2024-06-04 13:30:12 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:30:12 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@55deaba1]
2024-06-04 13:30:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:30:15 - Writing ["Password reset token: d6f96029-abc0-4553-a088-dce8ed0a3a74"]
2024-06-04 13:30:15 - Completed 200 OK
2024-06-04 13:30:25 - GET "/cart/list", parameters={}
2024-06-04 13:30:25 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:30:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:30:25 - Writing [[com.example.ecommercemanagement.model.Cart@61356eb1, com.example.ecommercemanagement.model.Cart@5a4 (truncated)...]
2024-06-04 13:30:25 - Completed 200 OK
2024-06-04 13:30:25 - GET "/cart/list", parameters={}
2024-06-04 13:30:25 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:30:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:30:25 - Writing [[com.example.ecommercemanagement.model.Cart@29c79d19, com.example.ecommercemanagement.model.Cart@35e (truncated)...]
2024-06-04 13:30:25 - Completed 200 OK
2024-06-04 13:31:27 - GET "/cart/list", parameters={}
2024-06-04 13:31:27 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:31:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:31:27 - Writing [[com.example.ecommercemanagement.model.Cart@637dfef2, com.example.ecommercemanagement.model.Cart@611 (truncated)...]
2024-06-04 13:31:27 - Completed 200 OK
2024-06-04 13:31:31 - GET "/cart/list", parameters={}
2024-06-04 13:31:31 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:31:31 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:31:31 - Writing [[com.example.ecommercemanagement.model.Cart@5387a148, com.example.ecommercemanagement.model.Cart@4da (truncated)...]
2024-06-04 13:31:31 - Completed 200 OK
2024-06-04 13:31:52 - GET "/cart/list", parameters={}
2024-06-04 13:31:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:31:53 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:31:53 - Writing [[com.example.ecommercemanagement.model.Cart@6d1c5c2c, com.example.ecommercemanagement.model.Cart@3c4 (truncated)...]
2024-06-04 13:31:53 - Completed 200 OK
2024-06-04 13:31:56 - GET "/cart/list", parameters={}
2024-06-04 13:31:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:31:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:31:56 - Writing [[com.example.ecommercemanagement.model.Cart@1928dbf7, com.example.ecommercemanagement.model.Cart@212 (truncated)...]
2024-06-04 13:31:56 - Completed 200 OK
2024-06-04 13:31:59 - POST "/password/reset-request", parameters={}
2024-06-04 13:31:59 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:31:59 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@5af94fa4]
2024-06-04 13:32:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:32:01 - Writing ["Password reset token: af1ead77-7906-4eef-b471-b25fa9f7d35d"]
2024-06-04 13:32:01 - Completed 200 OK
2024-06-04 13:32:12 - GET "/cart/list", parameters={}
2024-06-04 13:32:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:32:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:32:12 - Writing [[com.example.ecommercemanagement.model.Cart@2de66986, com.example.ecommercemanagement.model.Cart@7dc (truncated)...]
2024-06-04 13:32:12 - Completed 200 OK
2024-06-04 13:32:13 - GET "/cart/list", parameters={}
2024-06-04 13:32:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:32:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:32:13 - Writing [[com.example.ecommercemanagement.model.Cart@6421623e, com.example.ecommercemanagement.model.Cart@565 (truncated)...]
2024-06-04 13:32:13 - Completed 200 OK
2024-06-04 13:32:43 - GET "/cart/list", parameters={}
2024-06-04 13:32:43 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:32:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:32:43 - Writing [[com.example.ecommercemanagement.model.Cart@2a50b748, com.example.ecommercemanagement.model.Cart@756 (truncated)...]
2024-06-04 13:32:43 - Completed 200 OK
2024-06-04 13:33:36 - GET "/cart/list", parameters={}
2024-06-04 13:33:36 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:33:36 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:33:36 - Writing [[com.example.ecommercemanagement.model.Cart@52744915, com.example.ecommercemanagement.model.Cart@3b9 (truncated)...]
2024-06-04 13:33:36 - Completed 200 OK
2024-06-04 13:33:41 - GET "/cart/list", parameters={}
2024-06-04 13:33:41 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:33:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:33:41 - Writing [[com.example.ecommercemanagement.model.Cart@3a52624a, com.example.ecommercemanagement.model.Cart@7f5 (truncated)...]
2024-06-04 13:33:41 - Completed 200 OK
2024-06-04 13:33:44 - POST "/password/reset-request", parameters={}
2024-06-04 13:33:44 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:33:44 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@26fc7b5e]
2024-06-04 13:33:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:33:46 - Writing ["Password reset token: cf428d02-449b-484e-9a69-10bdd3b7d087"]
2024-06-04 13:33:46 - Completed 200 OK
2024-06-04 13:33:58 - GET "/cart/list", parameters={}
2024-06-04 13:33:58 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:33:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:33:58 - Writing [[com.example.ecommercemanagement.model.Cart@39cb8de5, com.example.ecommercemanagement.model.Cart@633 (truncated)...]
2024-06-04 13:33:58 - Completed 200 OK
2024-06-04 13:34:27 - POST "/auth/login", parameters={}
2024-06-04 13:34:27 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:34:27 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : as123Full Name : nullPhone Number : nullCou (truncated)...]
2024-06-04 13:34:27 - Username: as123 
2024-06-04 13:34:28 - Password: as123 
2024-06-04 13:34:28 - User.getPassword: $2a$10$eweCni7v4kq3NBt9UNpknur23h3TOR8o8bXAkwClowMNDotQ5tDv6
2024-06-04 13:34:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:34:28 - Writing ["Invalid username or password"]
2024-06-04 13:34:28 - Completed 401 UNAUTHORIZED
2024-06-04 13:34:35 - GET "/cart/list", parameters={}
2024-06-04 13:34:35 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:34:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:34:35 - Writing [[com.example.ecommercemanagement.model.Cart@7a82a924, com.example.ecommercemanagement.model.Cart@26b (truncated)...]
2024-06-04 13:34:35 - Completed 200 OK
2024-06-04 13:34:37 - GET "/cart/list", parameters={}
2024-06-04 13:34:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:34:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:34:37 - Writing [[com.example.ecommercemanagement.model.Cart@68d24210, com.example.ecommercemanagement.model.Cart@1da (truncated)...]
2024-06-04 13:34:37 - Completed 200 OK
2024-06-04 13:34:41 - GET "/cart/list", parameters={}
2024-06-04 13:34:41 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:34:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:34:41 - Writing [[com.example.ecommercemanagement.model.Cart@3b01a25, com.example.ecommercemanagement.model.Cart@5483 (truncated)...]
2024-06-04 13:34:41 - Completed 200 OK
2024-06-04 13:34:44 - POST "/password/reset-request", parameters={}
2024-06-04 13:34:44 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:34:44 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@30afb8b5]
2024-06-04 13:34:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:34:46 - Writing ["Password reset token: f9678ffb-be22-4fcf-8eaf-430981f3e9bc"]
2024-06-04 13:34:46 - Completed 200 OK
2024-06-04 13:35:05 - GET "/cart/list", parameters={}
2024-06-04 13:35:05 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:35:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:35:06 - Writing [[com.example.ecommercemanagement.model.Cart@197274a1, com.example.ecommercemanagement.model.Cart@32a (truncated)...]
2024-06-04 13:35:06 - Completed 200 OK
2024-06-04 13:35:11 - POST "/auth/login", parameters={}
2024-06-04 13:35:11 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:35:11 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : success12Full Name : nullPhone Number : nul (truncated)...]
2024-06-04 13:35:11 - Username: success12 
2024-06-04 13:35:11 - Password: success12 
2024-06-04 13:35:11 - User.getPassword: $2a$10$eweCni7v4kq3NBt9UNpknur23h3TOR8o8bXAkwClowMNDotQ5tDv6
2024-06-04 13:35:11 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:35:11 - Writing ["Invalid username or password"]
2024-06-04 13:35:11 - Completed 401 UNAUTHORIZED
2024-06-04 13:35:19 - POST "/auth/login", parameters={}
2024-06-04 13:35:19 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:35:19 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : success123Full Name : nullPhone Number : nu (truncated)...]
2024-06-04 13:35:19 - Username: success123 
2024-06-04 13:35:19 - Password: success123 
2024-06-04 13:35:19 - User.getPassword: $2a$10$eweCni7v4kq3NBt9UNpknur23h3TOR8o8bXAkwClowMNDotQ5tDv6
2024-06-04 13:35:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:35:19 - Writing ["Invalid username or password"]
2024-06-04 13:35:19 - Completed 401 UNAUTHORIZED
2024-06-04 13:35:24 - GET "/cart/list", parameters={}
2024-06-04 13:35:24 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:35:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:35:24 - Writing [[com.example.ecommercemanagement.model.Cart@5b9499e7, com.example.ecommercemanagement.model.Cart@54a (truncated)...]
2024-06-04 13:35:24 - Completed 200 OK
2024-06-04 13:35:28 - POST "/password/reset-request", parameters={}
2024-06-04 13:35:28 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:35:28 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@5c605a71]
2024-06-04 13:35:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:35:30 - Writing ["Password reset token: 24370db9-55ca-44b5-b5f6-89e7f9f911a9"]
2024-06-04 13:35:30 - Completed 200 OK
2024-06-04 13:35:43 - GET "/cart/list", parameters={}
2024-06-04 13:35:43 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:35:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:35:43 - Writing [[com.example.ecommercemanagement.model.Cart@2769259c, com.example.ecommercemanagement.model.Cart@4e1 (truncated)...]
2024-06-04 13:35:43 - Completed 200 OK
2024-06-04 13:35:51 - POST "/auth/login", parameters={}
2024-06-04 13:35:51 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:35:51 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : test57Full Name : nullPhone Number : nullCo (truncated)...]
2024-06-04 13:35:51 - Username: test57 
2024-06-04 13:35:51 - Password: test57 
2024-06-04 13:35:51 - User.getPassword: $2a$10$eweCni7v4kq3NBt9UNpknur23h3TOR8o8bXAkwClowMNDotQ5tDv6
2024-06-04 13:35:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:35:51 - Writing ["Invalid username or password"]
2024-06-04 13:35:51 - Completed 401 UNAUTHORIZED
2024-06-04 13:36:10 - POST "/auth/login", parameters={}
2024-06-04 13:36:10 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:36:10 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : test57Full Name : nullPhone Number : nullCo (truncated)...]
2024-06-04 13:36:10 - Username: test57 
2024-06-04 13:36:11 - Password: test57 
2024-06-04 13:36:11 - User.getPassword: $2a$10$eweCni7v4kq3NBt9UNpknur23h3TOR8o8bXAkwClowMNDotQ5tDv6
2024-06-04 13:36:11 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:36:11 - Writing ["Invalid username or password"]
2024-06-04 13:36:11 - Completed 401 UNAUTHORIZED
2024-06-04 13:36:43 - POST "/password/reset-request", parameters={}
2024-06-04 13:36:43 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:36:43 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@280fb45f]
2024-06-04 13:36:45 - Using 'text/plain', given [*/*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:36:45 - Writing ["Password reset token: 928d3c31-c35c-423d-9610-115f9b0b4727"]
2024-06-04 13:36:45 - Completed 200 OK
2024-06-04 13:36:58 - POST "/password/reset", parameters={}
2024-06-04 13:36:58 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:36:58 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@62212d1b]
2024-06-04 13:36:58 - Using 'text/plain', given [*/*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:36:58 - Writing ["Password has been reset"]
2024-06-04 13:36:58 - Completed 200 OK
2024-06-04 13:37:09 - POST "/auth/login", parameters={}
2024-06-04 13:37:09 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:37:09 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : jahrel1234Full Name : nullPhone Number : nu (truncated)...]
2024-06-04 13:37:09 - Username: jahrel1234 
2024-06-04 13:37:09 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 13:37:09 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@6657f5c4]
2024-06-04 13:37:09 - Completed 200 OK
2024-06-04 13:38:19 - POST "/auth/login", parameters={}
2024-06-04 13:38:19 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:38:19 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : jahrel1234Full Name : nullPhone Number : nu (truncated)...]
2024-06-04 13:38:19 - Username: jahrel1234 
2024-06-04 13:38:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:38:20 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@62599e71]
2024-06-04 13:38:20 - Completed 200 OK
2024-06-04 13:38:20 - GET "/cart/list", parameters={}
2024-06-04 13:38:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:38:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:38:20 - Writing [[com.example.ecommercemanagement.model.Cart@626fad7f, com.example.ecommercemanagement.model.Cart@7ed (truncated)...]
2024-06-04 13:38:20 - Completed 200 OK
2024-06-04 13:38:55 - GET "/cart/list", parameters={}
2024-06-04 13:38:55 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:38:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:38:55 - Writing [[com.example.ecommercemanagement.model.Cart@35db77ea, com.example.ecommercemanagement.model.Cart@179 (truncated)...]
2024-06-04 13:38:55 - Completed 200 OK
2024-06-04 13:38:59 - GET "/cart/list", parameters={}
2024-06-04 13:38:59 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:38:59 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:38:59 - Writing [[com.example.ecommercemanagement.model.Cart@34371b50, com.example.ecommercemanagement.model.Cart@6fb (truncated)...]
2024-06-04 13:38:59 - Completed 200 OK
2024-06-04 13:39:08 - POST "/password/reset-request", parameters={}
2024-06-04 13:39:08 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 13:39:08 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@63ef662]
2024-06-04 13:39:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:39:10 - Writing ["Password reset token: 45267972-d16d-48fb-a0b2-d8f3db81dc7c"]
2024-06-04 13:39:10 - Completed 200 OK
2024-06-04 13:39:21 - POST "/password/reset", parameters={}
2024-06-04 13:39:21 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 13:39:21 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@245453e9]
2024-06-04 13:39:21 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 13:39:21 - Writing ["Password has been reset"]
2024-06-04 13:39:21 - Completed 200 OK
2024-06-04 13:39:27 - GET "/cart/list", parameters={}
2024-06-04 13:39:27 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:39:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:39:27 - Writing [[com.example.ecommercemanagement.model.Cart@227ef832, com.example.ecommercemanagement.model.Cart@647 (truncated)...]
2024-06-04 13:39:27 - Completed 200 OK
2024-06-04 13:39:35 - POST "/auth/login", parameters={}
2024-06-04 13:39:35 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 13:39:35 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : test89Full Name : nullPhone Number : nullCo (truncated)...]
2024-06-04 13:39:35 - Username: test89 
2024-06-04 13:39:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:39:35 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@12438927]
2024-06-04 13:39:35 - Completed 200 OK
2024-06-04 13:39:36 - GET "/cart/list", parameters={}
2024-06-04 13:39:36 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:39:36 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:39:36 - Writing [[com.example.ecommercemanagement.model.Cart@5a381ef9, com.example.ecommercemanagement.model.Cart@79a (truncated)...]
2024-06-04 13:39:36 - Completed 200 OK
2024-06-04 13:40:01 - GET "/cart/list", parameters={}
2024-06-04 13:40:01 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:40:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:40:01 - Writing [[com.example.ecommercemanagement.model.Cart@37e1390b, com.example.ecommercemanagement.model.Cart@32b (truncated)...]
2024-06-04 13:40:01 - Completed 200 OK
2024-06-04 13:50:50 - GET "/cart/list", parameters={}
2024-06-04 13:50:50 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:50:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:50:50 - Writing [[com.example.ecommercemanagement.model.Cart@667c5756, com.example.ecommercemanagement.model.Cart@683 (truncated)...]
2024-06-04 13:50:50 - Completed 200 OK
2024-06-04 13:50:51 - GET "/cart/list", parameters={}
2024-06-04 13:50:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 13:50:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 13:50:51 - Writing [[com.example.ecommercemanagement.model.Cart@21d87b87, com.example.ecommercemanagement.model.Cart@77d (truncated)...]
2024-06-04 13:50:51 - Completed 200 OK
2024-06-04 14:01:06 - GET "/cart/list", parameters={}
2024-06-04 14:01:06 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:01:07 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:01:07 - Writing [[com.example.ecommercemanagement.model.Cart@3bb2ce6d, com.example.ecommercemanagement.model.Cart@218 (truncated)...]
2024-06-04 14:01:07 - Completed 200 OK
2024-06-04 14:08:32 - GET "/cart/list", parameters={}
2024-06-04 14:08:32 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:08:33 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:08:33 - Writing [[com.example.ecommercemanagement.model.Cart@17014921, com.example.ecommercemanagement.model.Cart@6a1 (truncated)...]
2024-06-04 14:08:33 - Completed 200 OK
2024-06-04 14:09:08 - GET "/cart/list", parameters={}
2024-06-04 14:09:08 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:09:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:09:08 - Writing [[com.example.ecommercemanagement.model.Cart@5a36023b, com.example.ecommercemanagement.model.Cart@468 (truncated)...]
2024-06-04 14:09:08 - Completed 200 OK
2024-06-04 14:10:06 - GET "/cart/list", parameters={}
2024-06-04 14:10:06 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:10:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:10:06 - Writing [[com.example.ecommercemanagement.model.Cart@7d5cb44b, com.example.ecommercemanagement.model.Cart@49a (truncated)...]
2024-06-04 14:10:06 - Completed 200 OK
2024-06-04 14:14:00 - GET "/cart/list", parameters={}
2024-06-04 14:14:00 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:14:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:14:01 - Writing [[com.example.ecommercemanagement.model.Cart@65da264a, com.example.ecommercemanagement.model.Cart@3c1 (truncated)...]
2024-06-04 14:14:01 - Completed 200 OK
2024-06-04 14:15:29 - GET "/cart/list", parameters={}
2024-06-04 14:15:29 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:15:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:15:29 - Writing [[com.example.ecommercemanagement.model.Cart@6101b7ed, com.example.ecommercemanagement.model.Cart@74b (truncated)...]
2024-06-04 14:15:29 - Completed 200 OK
2024-06-04 14:16:24 - GET "/cart/list", parameters={}
2024-06-04 14:16:24 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:16:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:16:24 - Writing [[com.example.ecommercemanagement.model.Cart@363c489f, com.example.ecommercemanagement.model.Cart@3a4 (truncated)...]
2024-06-04 14:16:24 - Completed 200 OK
2024-06-04 14:16:39 - POST "/auth/login", parameters={}
2024-06-04 14:16:39 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 14:16:39 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : test57Full Name : nullPhone Number : nullCo (truncated)...]
2024-06-04 14:16:39 - Username: test57 
2024-06-04 14:16:39 - Password: test57 
2024-06-04 14:16:39 - User.getPassword: $2a$10$WR3Ooo38uWruVZPRGqBPs.qbQYpXfRD4M7IhvPAwnatg5Xvo1DS5W
2024-06-04 14:16:39 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 14:16:39 - Writing ["Invalid username or password"]
2024-06-04 14:16:39 - Completed 401 UNAUTHORIZED
2024-06-04 14:16:48 - GET "/cart/list", parameters={}
2024-06-04 14:16:48 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:16:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:16:48 - Writing [[com.example.ecommercemanagement.model.Cart@645b0e55, com.example.ecommercemanagement.model.Cart@59d (truncated)...]
2024-06-04 14:16:48 - Completed 200 OK
2024-06-04 14:16:51 - POST "/password/reset-request", parameters={}
2024-06-04 14:16:51 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#passwordRequest(PasswordRequest)
2024-06-04 14:16:51 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordRequest@6ab1890c]
2024-06-04 14:16:53 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 14:16:53 - Writing ["Password reset token: 06064432-529d-4c6c-9500-a4b4c04257b4"]
2024-06-04 14:16:53 - Completed 200 OK
2024-06-04 14:17:06 - POST "/password/reset", parameters={}
2024-06-04 14:17:06 - Mapped to com.example.ecommercemanagement.controller.PasswordResetController#resetPassword(PasswordReset)
2024-06-04 14:17:06 - Read "application/json;charset=UTF-8" to [com.example.ecommercemanagement.model.PasswordReset@186cc591]
2024-06-04 14:17:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [text/plain, */*, application/json, application/*+json]
2024-06-04 14:17:06 - Writing ["Password has been reset"]
2024-06-04 14:17:06 - Completed 200 OK
2024-06-04 14:17:09 - GET "/cart/list", parameters={}
2024-06-04 14:17:09 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:17:09 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:17:09 - Writing [[com.example.ecommercemanagement.model.Cart@63778e47, com.example.ecommercemanagement.model.Cart@370 (truncated)...]
2024-06-04 14:17:09 - Completed 200 OK
2024-06-04 14:17:26 - POST "/auth/login", parameters={}
2024-06-04 14:17:26 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 14:17:26 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 14:17:26 - Username: devjahrel 
2024-06-04 14:17:26 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:17:26 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@407b0811]
2024-06-04 14:17:26 - Completed 200 OK
2024-06-04 14:17:27 - GET "/cart/list", parameters={}
2024-06-04 14:17:27 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:17:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:17:27 - Writing [[com.example.ecommercemanagement.model.Cart@6c6459e6, com.example.ecommercemanagement.model.Cart@62f (truncated)...]
2024-06-04 14:17:27 - Completed 200 OK
2024-06-04 14:17:34 - GET "/cart/list", parameters={}
2024-06-04 14:17:34 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:17:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:17:34 - Writing [[com.example.ecommercemanagement.model.Cart@1aea3e27, com.example.ecommercemanagement.model.Cart@201 (truncated)...]
2024-06-04 14:17:34 - Completed 200 OK
2024-06-04 14:18:18 - GET "/cart/list", parameters={}
2024-06-04 14:18:18 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:18:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:18:18 - Writing [[com.example.ecommercemanagement.model.Cart@67f8342f, com.example.ecommercemanagement.model.Cart@73d (truncated)...]
2024-06-04 14:18:18 - Completed 200 OK
2024-06-04 14:18:22 - GET "/cart/list", parameters={}
2024-06-04 14:18:22 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:18:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:18:22 - Writing [[com.example.ecommercemanagement.model.Cart@1e4c127c, com.example.ecommercemanagement.model.Cart@451 (truncated)...]
2024-06-04 14:18:22 - Completed 200 OK
2024-06-04 14:18:37 - GET "/cart/list", parameters={}
2024-06-04 14:18:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:18:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:18:37 - Writing [[com.example.ecommercemanagement.model.Cart@5c64a2e6, com.example.ecommercemanagement.model.Cart@233 (truncated)...]
2024-06-04 14:18:37 - Completed 200 OK
2024-06-04 14:30:16 - GET "/cart/list", parameters={}
2024-06-04 14:30:16 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:30:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:30:16 - Writing [[com.example.ecommercemanagement.model.Cart@6055cac9, com.example.ecommercemanagement.model.Cart@379 (truncated)...]
2024-06-04 14:30:16 - Completed 200 OK
2024-06-04 14:30:51 - GET "/products/list/search?title=Xiaomi", parameters={masked}
2024-06-04 14:30:51 - Mapped to com.example.ecommercemanagement.controller.ProductController#findProductByTitle(String)
2024-06-04 14:30:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:30:52 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 14:30:52 - Completed 200 OK
2024-06-04 14:30:54 - GET "/cart/list", parameters={}
2024-06-04 14:30:54 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:30:54 - GET "/products/list", parameters={}
2024-06-04 14:30:54 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 14:30:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:30:54 - Writing [[com.example.ecommercemanagement.model.Cart@575a60a5, com.example.ecommercemanagement.model.Cart@113 (truncated)...]
2024-06-04 14:30:54 - Completed 200 OK
2024-06-04 14:30:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:30:54 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 14:30:54 - Completed 200 OK
2024-06-04 14:31:13 - GET "/cart/list", parameters={}
2024-06-04 14:31:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:31:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:13 - Writing [[com.example.ecommercemanagement.model.Cart@4d42db14, com.example.ecommercemanagement.model.Cart@7bb (truncated)...]
2024-06-04 14:31:13 - Completed 200 OK
2024-06-04 14:31:25 - GET "/cart/list", parameters={}
2024-06-04 14:31:25 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:31:25 - GET "/products/list", parameters={}
2024-06-04 14:31:25 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 14:31:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:25 - Writing [[com.example.ecommercemanagement.model.Cart@69a8f524, com.example.ecommercemanagement.model.Cart@11d (truncated)...]
2024-06-04 14:31:25 - Completed 200 OK
2024-06-04 14:31:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:25 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 14:31:25 - Completed 200 OK
2024-06-04 14:31:28 - GET "/cart/list", parameters={}
2024-06-04 14:31:28 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:31:28 - GET "/products/list", parameters={}
2024-06-04 14:31:28 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 14:31:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:28 - Writing [[com.example.ecommercemanagement.model.Cart@14ff04e1, com.example.ecommercemanagement.model.Cart@fd4 (truncated)...]
2024-06-04 14:31:28 - Completed 200 OK
2024-06-04 14:31:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:28 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 14:31:28 - Completed 200 OK
2024-06-04 14:31:32 - GET "/cart/list", parameters={}
2024-06-04 14:31:32 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:31:32 - GET "/products/list", parameters={}
2024-06-04 14:31:32 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 14:31:32 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:32 - Writing [[com.example.ecommercemanagement.model.Cart@500c924d, com.example.ecommercemanagement.model.Cart@f2f (truncated)...]
2024-06-04 14:31:32 - Completed 200 OK
2024-06-04 14:31:32 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:32 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 14:31:32 - Completed 200 OK
2024-06-04 14:31:38 - GET "/cart/list", parameters={}
2024-06-04 14:31:38 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:31:38 - GET "/products/list", parameters={}
2024-06-04 14:31:38 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 14:31:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:38 - Writing [[com.example.ecommercemanagement.model.Cart@46bb37a6, com.example.ecommercemanagement.model.Cart@607 (truncated)...]
2024-06-04 14:31:38 - Completed 200 OK
2024-06-04 14:31:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:38 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 14:31:38 - Completed 200 OK
2024-06-04 14:31:45 - GET "/cart/list", parameters={}
2024-06-04 14:31:45 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:31:45 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:45 - Writing [[com.example.ecommercemanagement.model.Cart@2ed4ac8c, com.example.ecommercemanagement.model.Cart@a2c (truncated)...]
2024-06-04 14:31:45 - Completed 200 OK
2024-06-04 14:31:57 - GET "/cart/list", parameters={}
2024-06-04 14:31:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:31:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:31:57 - Writing [[com.example.ecommercemanagement.model.Cart@6308a55e, com.example.ecommercemanagement.model.Cart@46a (truncated)...]
2024-06-04 14:31:58 - Completed 200 OK
2024-06-04 14:32:12 - GET "/cart/list", parameters={}
2024-06-04 14:32:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:32:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:32:12 - Writing [[com.example.ecommercemanagement.model.Cart@18e6bb73, com.example.ecommercemanagement.model.Cart@186 (truncated)...]
2024-06-04 14:32:12 - Completed 200 OK
2024-06-04 14:32:19 - GET "/cart/list", parameters={}
2024-06-04 14:32:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:32:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:32:19 - Writing [[com.example.ecommercemanagement.model.Cart@4dc5d06b, com.example.ecommercemanagement.model.Cart@b24 (truncated)...]
2024-06-04 14:32:19 - Completed 200 OK
2024-06-04 14:32:33 - GET "/cart/list", parameters={}
2024-06-04 14:32:33 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:32:33 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:32:33 - Writing [[com.example.ecommercemanagement.model.Cart@507a4263, com.example.ecommercemanagement.model.Cart@447 (truncated)...]
2024-06-04 14:32:33 - Completed 200 OK
2024-06-04 14:33:24 - GET "/cart/list", parameters={}
2024-06-04 14:33:24 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 14:33:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 14:33:24 - Writing [[com.example.ecommercemanagement.model.Cart@1c9e1de2, com.example.ecommercemanagement.model.Cart@eac (truncated)...]
2024-06-04 14:33:24 - Completed 200 OK
2024-06-04 15:06:14 - Starting EcommerceManagementApplication using Java 21.0.1 with PID 1130 (/Users/user/Downloads/ecommerce-management/target/classes started by user in /Users/user/Downloads/ecommerce-management)
2024-06-04 15:06:14 - No active profile set, falling back to 1 default profile: "default"
2024-06-04 15:06:16 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-04 15:06:16 - Finished Spring Data repository scanning in 125 ms. Found 4 JPA repository interfaces.
2024-06-04 15:06:17 - Tomcat initialized with port 8080 (http)
2024-06-04 15:06:17 - Starting service [Tomcat]
2024-06-04 15:06:17 - Starting Servlet engine: [Apache Tomcat/10.1.18]
2024-06-04 15:06:17 - Initializing Spring embedded WebApplicationContext
2024-06-04 15:06:17 - Root WebApplicationContext: initialization completed in 3183 ms
2024-06-04 15:06:18 - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-04 15:06:18 - HHH000412: Hibernate ORM core version 6.4.1.Final
2024-06-04 15:06:18 - HHH000026: Second-level cache disabled
2024-06-04 15:06:18 - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-04 15:06:18 - HikariPool-1 - Starting...
2024-06-04 15:06:21 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@d9f5fce
2024-06-04 15:06:21 - HikariPool-1 - Start completed.
2024-06-04 15:06:25 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-06-04 15:06:30 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 15:06:34 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-06-04 15:06:34 - 15 mappings in 'requestMappingHandlerMapping'
2024-06-04 15:06:35 - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2024-06-04 15:06:35 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@220d7eb7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@a165c11, org.springframework.security.web.context.SecurityContextHolderFilter@b0e6d4e, org.springframework.security.web.header.HeaderWriterFilter@1d01fa0c, org.springframework.web.filter.CorsFilter@1eda12b3, org.springframework.security.web.authentication.logout.LogoutFilter@4b9dd787, org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter@923bf67, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1be3e952, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@818a514, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5006a697, org.springframework.security.web.session.SessionManagementFilter@5fcff272, org.springframework.security.web.access.ExceptionTranslationFilter@48614fb3, org.springframework.security.web.access.intercept.AuthorizationFilter@44103266]
2024-06-04 15:06:35 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2024-06-04 15:06:35 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2024-06-04 15:06:35 - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2024-06-04 15:06:36 - Tomcat started on port 8080 (http) with context path ''
2024-06-04 15:06:36 - Started EcommerceManagementApplication in 22.747 seconds (process running for 23.545)
2024-06-04 15:06:47 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-06-04 15:06:47 - Initializing Servlet 'dispatcherServlet'
2024-06-04 15:06:47 - Detected StandardServletMultipartResolver
2024-06-04 15:06:47 - Detected AcceptHeaderLocaleResolver
2024-06-04 15:06:47 - Detected FixedThemeResolver
2024-06-04 15:06:47 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@a3e458
2024-06-04 15:06:47 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@7202009e
2024-06-04 15:06:47 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2024-06-04 15:06:47 - Completed initialization in 4 ms
2024-06-04 15:06:47 - POST "/auth/login", parameters={}
2024-06-04 15:06:47 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 15:06:47 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 15:06:49 - Username: devjahrel@gmail.com 
2024-06-04 15:06:49 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:06:49 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@5e7fd071]
2024-06-04 15:06:50 - Completed 200 OK
2024-06-04 15:06:51 - GET "/cart/list", parameters={}
2024-06-04 15:06:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:06:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:06:51 - Writing [[com.example.ecommercemanagement.model.Cart@f42ece8, com.example.ecommercemanagement.model.Cart@4993 (truncated)...]
2024-06-04 15:06:51 - Completed 200 OK
2024-06-04 15:06:56 - GET "/cart/list", parameters={}
2024-06-04 15:06:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:06:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:06:56 - Writing [[com.example.ecommercemanagement.model.Cart@79cd3894, com.example.ecommercemanagement.model.Cart@486 (truncated)...]
2024-06-04 15:06:56 - Completed 200 OK
2024-06-04 15:09:10 - Invalid chunk starting at byte [0] and ending at byte [2] with a value of [=1] ignored
 Note: further occurrences of Parameter errors will be logged at DEBUG level.
2024-06-04 15:09:10 - DELETE "/cart/remove/?=1", parameters={}
2024-06-04 15:09:10 - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2024-06-04 15:09:10 - Resource not found
2024-06-04 15:09:10 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource cart/remove.]
2024-06-04 15:09:10 - Completed 404 NOT_FOUND
2024-06-04 15:09:22 - DELETE "/cart/remove/?id=1", parameters={masked}
2024-06-04 15:09:22 - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2024-06-04 15:09:22 - Resource not found
2024-06-04 15:09:22 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource cart/remove.]
2024-06-04 15:09:22 - Completed 404 NOT_FOUND
2024-06-04 15:09:37 - DELETE "/cart/remove/?productId=1", parameters={masked}
2024-06-04 15:09:37 - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2024-06-04 15:09:37 - Resource not found
2024-06-04 15:09:37 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource cart/remove.]
2024-06-04 15:09:37 - Completed 404 NOT_FOUND
2024-06-04 15:09:42 - GET "/cart/list", parameters={}
2024-06-04 15:09:42 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:09:42 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:09:42 - Writing [[com.example.ecommercemanagement.model.Cart@18edcf33, com.example.ecommercemanagement.model.Cart@567 (truncated)...]
2024-06-04 15:09:42 - Completed 200 OK
2024-06-04 15:10:15 - DELETE "/cart/remove/?productId=4", parameters={masked}
2024-06-04 15:10:15 - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2024-06-04 15:10:15 - Resource not found
2024-06-04 15:10:15 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource cart/remove.]
2024-06-04 15:10:15 - Completed 404 NOT_FOUND
2024-06-04 15:10:34 - POST "/auth/login", parameters={}
2024-06-04 15:10:34 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 15:10:34 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 15:10:34 - Username: devjahrel@gmail.com 
2024-06-04 15:10:34 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:10:34 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@62bed498]
2024-06-04 15:10:34 - Completed 200 OK
2024-06-04 15:11:03 - DELETE "/cart/remove/?productId=4", parameters={masked}
2024-06-04 15:11:03 - Mapped to ResourceHttpRequestHandler [classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
2024-06-04 15:11:03 - Resource not found
2024-06-04 15:11:03 - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource cart/remove.]
2024-06-04 15:11:03 - Completed 404 NOT_FOUND
2024-06-04 15:11:03 - "ERROR" dispatch for DELETE "/error?productId=4", parameters={masked}
2024-06-04 15:11:03 - Mapped to org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController#error(HttpServletRequest)
2024-06-04 15:11:03 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:11:03 - Writing [{timestamp=Tue Jun 04 15:11:03 EST 2024, status=404, error=Not Found, path=/cart/remove/}]
2024-06-04 15:11:03 - Exiting from "ERROR" dispatch, status 404
2024-06-04 15:13:10 - DELETE "/cart/remove?productId=4", parameters={masked}
2024-06-04 15:13:10 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 15:13:10 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:13:10 - Nothing to write: null body
2024-06-04 15:13:10 - Completed 200 OK
2024-06-04 15:25:37 - GET "/cart/list", parameters={}
2024-06-04 15:25:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:25:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:25:38 - Writing [[]]
2024-06-04 15:25:38 - Completed 200 OK
2024-06-04 15:27:03 - GET "/cart/list", parameters={}
2024-06-04 15:27:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:27:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:27:03 - Writing [[]]
2024-06-04 15:27:03 - Completed 200 OK
2024-06-04 15:32:46 - GET "/cart/list", parameters={}
2024-06-04 15:32:46 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:32:47 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:32:47 - Writing [[]]
2024-06-04 15:32:47 - Completed 200 OK
2024-06-04 15:33:16 - GET "/cart/list", parameters={}
2024-06-04 15:33:16 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:33:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:33:16 - Writing [[]]
2024-06-04 15:33:16 - Completed 200 OK
2024-06-04 15:33:29 - GET "/cart/list", parameters={}
2024-06-04 15:33:29 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:33:29 - GET "/products/list", parameters={}
2024-06-04 15:33:29 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:33:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:33:29 - Writing [[]]
2024-06-04 15:33:29 - Completed 200 OK
2024-06-04 15:33:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:33:29 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:33:29 - Completed 200 OK
2024-06-04 15:36:03 - GET "/cart/list", parameters={}
2024-06-04 15:36:03 - GET "/products/list", parameters={}
2024-06-04 15:36:03 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:36:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:36:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:03 - Writing [[]]
2024-06-04 15:36:03 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:36:03 - Completed 200 OK
2024-06-04 15:36:03 - Completed 200 OK
2024-06-04 15:36:13 - GET "/products/list", parameters={}
2024-06-04 15:36:13 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:36:13 - GET "/cart/list", parameters={}
2024-06-04 15:36:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:36:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:13 - Writing [[]]
2024-06-04 15:36:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:13 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:36:13 - Completed 200 OK
2024-06-04 15:36:13 - Completed 200 OK
2024-06-04 15:36:19 - GET "/cart/list", parameters={}
2024-06-04 15:36:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:36:19 - GET "/products/list", parameters={}
2024-06-04 15:36:19 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:36:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:19 - Writing [[]]
2024-06-04 15:36:19 - Completed 200 OK
2024-06-04 15:36:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:19 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:36:19 - Completed 200 OK
2024-06-04 15:36:24 - GET "/cart/list", parameters={}
2024-06-04 15:36:24 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:36:24 - GET "/products/list", parameters={}
2024-06-04 15:36:24 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:36:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:24 - Writing [[]]
2024-06-04 15:36:24 - Completed 200 OK
2024-06-04 15:36:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:24 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:36:24 - Completed 200 OK
2024-06-04 15:36:48 - GET "/cart/list", parameters={}
2024-06-04 15:36:48 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:36:48 - GET "/products/list", parameters={}
2024-06-04 15:36:48 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:36:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:48 - Writing [[]]
2024-06-04 15:36:48 - Completed 200 OK
2024-06-04 15:36:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:36:48 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:36:48 - Completed 200 OK
2024-06-04 15:37:13 - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 15:37:13 - HikariPool-1 - Shutdown initiated...
2024-06-04 15:37:13 - HikariPool-1 - Shutdown completed.
2024-06-04 15:37:23 - Starting EcommerceManagementApplication using Java 21.0.1 with PID 5156 (/Users/user/Downloads/ecommerce-management/target/classes started by user in /Users/user/Downloads/ecommerce-management)
2024-06-04 15:37:23 - No active profile set, falling back to 1 default profile: "default"
2024-06-04 15:37:24 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-04 15:37:24 - Finished Spring Data repository scanning in 79 ms. Found 4 JPA repository interfaces.
2024-06-04 15:37:25 - Tomcat initialized with port 8080 (http)
2024-06-04 15:37:25 - Starting service [Tomcat]
2024-06-04 15:37:25 - Starting Servlet engine: [Apache Tomcat/10.1.18]
2024-06-04 15:37:25 - Initializing Spring embedded WebApplicationContext
2024-06-04 15:37:25 - Root WebApplicationContext: initialization completed in 2135 ms
2024-06-04 15:37:25 - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-04 15:37:25 - HHH000412: Hibernate ORM core version 6.4.1.Final
2024-06-04 15:37:25 - HHH000026: Second-level cache disabled
2024-06-04 15:37:25 - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-04 15:37:25 - HikariPool-1 - Starting...
2024-06-04 15:37:26 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6e8f2094
2024-06-04 15:37:26 - HikariPool-1 - Start completed.
2024-06-04 15:37:27 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-06-04 15:37:28 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 15:37:31 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-06-04 15:37:31 - 15 mappings in 'requestMappingHandlerMapping'
2024-06-04 15:37:31 - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2024-06-04 15:37:31 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@87df88d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4f3b11e6, org.springframework.security.web.context.SecurityContextHolderFilter@69a031a4, org.springframework.security.web.header.HeaderWriterFilter@eef6e, org.springframework.web.filter.CorsFilter@28da5c4d, org.springframework.security.web.authentication.logout.LogoutFilter@489c15e2, org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter@7212b28e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4b9dd787, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3545c913, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7c928399, org.springframework.security.web.session.SessionManagementFilter@37ad818e, org.springframework.security.web.access.ExceptionTranslationFilter@495e1ad1, org.springframework.security.web.access.intercept.AuthorizationFilter@1fa77770]
2024-06-04 15:37:31 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2024-06-04 15:37:31 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2024-06-04 15:37:31 - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2024-06-04 15:37:32 - Tomcat started on port 8080 (http) with context path ''
2024-06-04 15:37:32 - Started EcommerceManagementApplication in 9.626 seconds (process running for 10.132)
2024-06-04 15:37:43 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-06-04 15:37:43 - Initializing Servlet 'dispatcherServlet'
2024-06-04 15:37:43 - Detected StandardServletMultipartResolver
2024-06-04 15:37:43 - Detected AcceptHeaderLocaleResolver
2024-06-04 15:37:43 - Detected FixedThemeResolver
2024-06-04 15:37:43 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@2e243122
2024-06-04 15:37:43 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@d4dbb34
2024-06-04 15:37:43 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2024-06-04 15:37:43 - Completed initialization in 19 ms
2024-06-04 15:37:43 - GET "/cart/list", parameters={}
2024-06-04 15:37:43 - GET "/products/list", parameters={}
2024-06-04 15:37:43 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:37:43 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:37:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:37:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:37:43 - Writing [[]]
2024-06-04 15:37:43 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:37:44 - Completed 200 OK
2024-06-04 15:37:44 - Completed 200 OK
2024-06-04 15:37:54 - GET "/products/list", parameters={}
2024-06-04 15:37:54 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:37:54 - GET "/cart/list", parameters={}
2024-06-04 15:37:54 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:37:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:37:54 - Writing [[]]
2024-06-04 15:37:54 - Completed 200 OK
2024-06-04 15:37:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:37:54 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:37:54 - Completed 200 OK
2024-06-04 15:37:58 - GET "/cart/list", parameters={}
2024-06-04 15:37:58 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:37:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:37:58 - Writing [[]]
2024-06-04 15:37:58 - Completed 200 OK
2024-06-04 15:38:06 - POST "/auth/login", parameters={}
2024-06-04 15:38:06 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 15:38:06 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 15:38:06 - Username: devjahrel@gmail.com 
2024-06-04 15:38:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:38:06 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@8f2d455]
2024-06-04 15:38:06 - Completed 200 OK
2024-06-04 15:38:07 - GET "/cart/list", parameters={}
2024-06-04 15:38:07 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:38:07 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:38:07 - Writing [[]]
2024-06-04 15:38:07 - Completed 200 OK
2024-06-04 15:38:13 - GET "/cart/list", parameters={}
2024-06-04 15:38:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:38:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:38:14 - Writing [[]]
2024-06-04 15:38:14 - Completed 200 OK
2024-06-04 15:38:20 - GET "/cart/list", parameters={}
2024-06-04 15:38:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:38:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:38:20 - Writing [[]]
2024-06-04 15:38:20 - Completed 200 OK
2024-06-04 15:38:26 - GET "/cart/list", parameters={}
2024-06-04 15:38:26 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:38:26 - GET "/products/list", parameters={}
2024-06-04 15:38:26 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:38:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:38:27 - Writing [[]]
2024-06-04 15:38:27 - Completed 200 OK
2024-06-04 15:38:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:38:27 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:38:27 - Completed 200 OK
2024-06-04 15:38:28 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 15:38:28 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 15:38:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:38:28 - Writing [com.example.ecommercemanagement.model.Cart@76d3dc60]
2024-06-04 15:38:28 - Completed 201 CREATED
2024-06-04 15:38:44 - GET "/cart/list", parameters={}
2024-06-04 15:38:44 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:38:44 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:38:44 - Writing [[com.example.ecommercemanagement.model.Cart@6c2030e7]]
2024-06-04 15:38:44 - Completed 200 OK
2024-06-04 15:39:14 - GET "/cart/list", parameters={}
2024-06-04 15:39:14 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:39:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:39:14 - Writing [[com.example.ecommercemanagement.model.Cart@7dfcf9a2]]
2024-06-04 15:39:14 - Completed 200 OK
2024-06-04 15:39:33 - GET "/cart/list", parameters={}
2024-06-04 15:39:33 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:39:33 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:39:33 - Writing [[com.example.ecommercemanagement.model.Cart@33ed1636]]
2024-06-04 15:39:33 - Completed 200 OK
2024-06-04 15:39:50 - GET "/products/list", parameters={}
2024-06-04 15:39:50 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:39:50 - GET "/cart/list", parameters={}
2024-06-04 15:39:50 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:39:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:39:50 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:39:50 - Completed 200 OK
2024-06-04 15:39:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:39:51 - Writing [[com.example.ecommercemanagement.model.Cart@7c0d32ac]]
2024-06-04 15:39:51 - Completed 200 OK
2024-06-04 15:40:13 - GET "/cart/list", parameters={}
2024-06-04 15:40:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:40:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:40:13 - Writing [[com.example.ecommercemanagement.model.Cart@5f2cc5be]]
2024-06-04 15:40:13 - Completed 200 OK
2024-06-04 15:40:16 - GET "/cart/list", parameters={}
2024-06-04 15:40:16 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:40:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:40:16 - Writing [[com.example.ecommercemanagement.model.Cart@3a42f5f2]]
2024-06-04 15:40:16 - Completed 200 OK
2024-06-04 15:40:25 - GET "/cart/list", parameters={}
2024-06-04 15:40:25 - GET "/products/list", parameters={}
2024-06-04 15:40:25 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:40:25 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 15:40:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:40:25 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 15:40:25 - Completed 200 OK
2024-06-04 15:40:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:40:25 - Writing [[com.example.ecommercemanagement.model.Cart@739e69b8]]
2024-06-04 15:40:25 - Completed 200 OK
2024-06-04 15:40:34 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 15:40:34 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 15:40:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:40:34 - Writing [com.example.ecommercemanagement.model.Cart@30f5516a]
2024-06-04 15:40:34 - Completed 201 CREATED
2024-06-04 15:40:41 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 15:40:41 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 15:40:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 15:40:41 - Writing [com.example.ecommercemanagement.model.Cart@2f31081]
2024-06-04 15:40:41 - Completed 201 CREATED
2024-06-04 15:55:47 - GET "/cart/list", parameters={}
2024-06-04 15:55:47 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:55:47 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:55:47 - Writing [[com.example.ecommercemanagement.model.Cart@c3fc0a0, com.example.ecommercemanagement.model.Cart@53a4 (truncated)...]
2024-06-04 15:55:47 - Completed 200 OK
2024-06-04 15:56:16 - POST "/auth/login", parameters={}
2024-06-04 15:56:16 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 15:56:16 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 15:56:16 - Username: devjahrel@gmail.com 
2024-06-04 15:56:17 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:56:17 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@687b0ef4]
2024-06-04 15:56:17 - Completed 200 OK
2024-06-04 15:56:30 - DELETE "/cart/remove?productId=2", parameters={masked}
2024-06-04 15:56:30 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 15:56:30 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:56:30 - Nothing to write: null body
2024-06-04 15:56:30 - Completed 200 OK
2024-06-04 15:56:34 - DELETE "/cart/remove?productId=2", parameters={masked}
2024-06-04 15:56:34 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 15:56:34 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:56:34 - Nothing to write: null body
2024-06-04 15:56:34 - Completed 200 OK
2024-06-04 15:56:37 - GET "/cart/list", parameters={}
2024-06-04 15:56:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:56:37 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:56:37 - Writing [[]]
2024-06-04 15:56:37 - Completed 200 OK
2024-06-04 15:56:40 - GET "/cart/list", parameters={}
2024-06-04 15:56:40 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:56:40 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:56:40 - Writing [[]]
2024-06-04 15:56:40 - Completed 200 OK
2024-06-04 15:56:46 - POST "/cart/add?productId=6&quantity=4", parameters={masked}
2024-06-04 15:56:46 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 15:56:46 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:56:46 - Writing [com.example.ecommercemanagement.model.Cart@63a08259]
2024-06-04 15:56:46 - Completed 201 CREATED
2024-06-04 15:56:58 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 15:56:58 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 15:56:59 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:56:59 - Writing [com.example.ecommercemanagement.model.Cart@4fb87708]
2024-06-04 15:56:59 - Completed 201 CREATED
2024-06-04 15:57:02 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 15:57:02 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 15:57:02 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:57:02 - Writing [com.example.ecommercemanagement.model.Cart@5451c78a]
2024-06-04 15:57:02 - Completed 201 CREATED
2024-06-04 15:57:05 - GET "/cart/list", parameters={}
2024-06-04 15:57:05 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 15:57:05 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 15:57:05 - Writing [[com.example.ecommercemanagement.model.Cart@6144a73, com.example.ecommercemanagement.model.Cart@5f87 (truncated)...]
2024-06-04 15:57:05 - Completed 200 OK
2024-06-04 16:15:08 - GET "/products/list", parameters={}
2024-06-04 16:15:08 - GET "/cart/list", parameters={}
2024-06-04 16:15:08 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:15:08 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:15:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:15:08 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:15:08 - Completed 200 OK
2024-06-04 16:15:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:15:08 - Writing [[com.example.ecommercemanagement.model.Cart@4630879, com.example.ecommercemanagement.model.Cart@4d02 (truncated)...]
2024-06-04 16:15:08 - Completed 200 OK
2024-06-04 16:15:14 - GET "/cart/list", parameters={}
2024-06-04 16:15:14 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:15:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:15:14 - Writing [[com.example.ecommercemanagement.model.Cart@2e8f56db, com.example.ecommercemanagement.model.Cart@177 (truncated)...]
2024-06-04 16:15:14 - Completed 200 OK
2024-06-04 16:15:19 - POST "/auth/login", parameters={}
2024-06-04 16:15:19 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 16:15:19 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 16:15:19 - Username: devjahrel@gmail.com 
2024-06-04 16:15:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:15:19 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@1fa847ff]
2024-06-04 16:15:19 - Completed 200 OK
2024-06-04 16:15:20 - GET "/cart/list", parameters={}
2024-06-04 16:15:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:15:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:15:20 - Writing [[com.example.ecommercemanagement.model.Cart@433b850f, com.example.ecommercemanagement.model.Cart@134 (truncated)...]
2024-06-04 16:15:20 - Completed 200 OK
2024-06-04 16:16:29 - GET "/cart/list", parameters={}
2024-06-04 16:16:29 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:16:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:16:29 - Writing [[com.example.ecommercemanagement.model.Cart@4b9dbecf, com.example.ecommercemanagement.model.Cart@5b6 (truncated)...]
2024-06-04 16:16:29 - Completed 200 OK
2024-06-04 16:16:35 - GET "/cart/list", parameters={}
2024-06-04 16:16:35 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:16:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:16:35 - Writing [[com.example.ecommercemanagement.model.Cart@12476719, com.example.ecommercemanagement.model.Cart@39f (truncated)...]
2024-06-04 16:16:35 - Completed 200 OK
2024-06-04 16:16:43 - GET "/cart/list", parameters={}
2024-06-04 16:16:43 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:16:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:16:43 - Writing [[com.example.ecommercemanagement.model.Cart@163c9b14, com.example.ecommercemanagement.model.Cart@239 (truncated)...]
2024-06-04 16:16:43 - Completed 200 OK
2024-06-04 16:17:29 - GET "/cart/list", parameters={}
2024-06-04 16:17:29 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:17:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:17:29 - Writing [[com.example.ecommercemanagement.model.Cart@22032a29, com.example.ecommercemanagement.model.Cart@59c (truncated)...]
2024-06-04 16:17:29 - Completed 200 OK
2024-06-04 16:18:43 - GET "/cart/list", parameters={}
2024-06-04 16:18:43 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:18:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:18:43 - Writing [[com.example.ecommercemanagement.model.Cart@4b792e69, com.example.ecommercemanagement.model.Cart@164 (truncated)...]
2024-06-04 16:18:43 - Completed 200 OK
2024-06-04 16:18:45 - GET "/cart/list", parameters={}
2024-06-04 16:18:45 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:18:45 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:18:45 - Writing [[com.example.ecommercemanagement.model.Cart@2534deb4, com.example.ecommercemanagement.model.Cart@69f (truncated)...]
2024-06-04 16:18:45 - Completed 200 OK
2024-06-04 16:20:09 - GET "/cart/list", parameters={}
2024-06-04 16:20:09 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:20:09 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:20:09 - Writing [[com.example.ecommercemanagement.model.Cart@44fe27da, com.example.ecommercemanagement.model.Cart@39a (truncated)...]
2024-06-04 16:20:09 - Completed 200 OK
2024-06-04 16:20:37 - DELETE "/cart/remove?productId=955", parameters={masked}
2024-06-04 16:20:37 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:20:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:20:38 - Nothing to write: null body
2024-06-04 16:20:38 - Completed 200 OK
2024-06-04 16:20:50 - DELETE "/cart/remove?productId=955", parameters={masked}
2024-06-04 16:20:50 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:20:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:20:50 - Nothing to write: null body
2024-06-04 16:20:50 - Completed 200 OK
2024-06-04 16:21:37 - GET "/cart/list", parameters={}
2024-06-04 16:21:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:21:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:21:37 - Writing [[]]
2024-06-04 16:21:37 - Completed 200 OK
2024-06-04 16:21:49 - GET "/cart/list", parameters={}
2024-06-04 16:21:49 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:21:49 - GET "/products/list", parameters={}
2024-06-04 16:21:49 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:21:49 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:21:49 - Writing [[]]
2024-06-04 16:21:49 - Completed 200 OK
2024-06-04 16:21:49 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:21:49 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:21:49 - Completed 200 OK
2024-06-04 16:21:54 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 16:21:54 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:21:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:21:54 - Writing [com.example.ecommercemanagement.model.Cart@3c634f8d]
2024-06-04 16:21:54 - Completed 201 CREATED
2024-06-04 16:21:58 - DELETE "/cart/remove?productId=958", parameters={masked}
2024-06-04 16:21:58 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:21:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:21:58 - Nothing to write: null body
2024-06-04 16:21:58 - Completed 200 OK
2024-06-04 16:22:03 - GET "/cart/list", parameters={}
2024-06-04 16:22:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:22:03 - GET "/products/list", parameters={}
2024-06-04 16:22:03 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:22:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:22:03 - Writing [[]]
2024-06-04 16:22:03 - Completed 200 OK
2024-06-04 16:22:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:22:03 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:22:03 - Completed 200 OK
2024-06-04 16:23:43 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 16:23:43 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:23:43 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:23:43 - Writing [com.example.ecommercemanagement.model.Cart@3c4aa316]
2024-06-04 16:23:43 - Completed 201 CREATED
2024-06-04 16:23:45 - DELETE "/cart/remove?productId=959", parameters={masked}
2024-06-04 16:23:45 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:23:45 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:23:45 - Nothing to write: null body
2024-06-04 16:23:45 - Completed 200 OK
2024-06-04 16:24:12 - GET "/cart/list", parameters={}
2024-06-04 16:24:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:24:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:24:12 - Writing [[]]
2024-06-04 16:24:12 - Completed 200 OK
2024-06-04 16:24:28 - GET "/cart/list", parameters={}
2024-06-04 16:24:28 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:24:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:24:28 - Writing [[]]
2024-06-04 16:24:28 - Completed 200 OK
2024-06-04 16:24:33 - GET "/cart/list", parameters={}
2024-06-04 16:24:33 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:24:33 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:24:33 - Writing [[]]
2024-06-04 16:24:33 - Completed 200 OK
2024-06-04 16:24:39 - GET "/cart/list", parameters={}
2024-06-04 16:24:39 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:24:39 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:24:39 - Writing [[]]
2024-06-04 16:24:39 - Completed 200 OK
2024-06-04 16:24:40 - GET "/cart/list", parameters={}
2024-06-04 16:24:40 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:24:40 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:24:40 - Writing [[]]
2024-06-04 16:24:40 - Completed 200 OK
2024-06-04 16:25:14 - GET "/cart/list", parameters={}
2024-06-04 16:25:14 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:25:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:25:14 - Writing [[]]
2024-06-04 16:25:14 - Completed 200 OK
2024-06-04 16:25:17 - GET "/cart/list", parameters={}
2024-06-04 16:25:17 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:25:17 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:25:17 - Writing [[]]
2024-06-04 16:25:17 - Completed 200 OK
2024-06-04 16:27:37 - GET "/cart/list", parameters={}
2024-06-04 16:27:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:27:37 - GET "/products/list", parameters={}
2024-06-04 16:27:37 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:27:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:27:37 - Writing [[]]
2024-06-04 16:27:37 - Completed 200 OK
2024-06-04 16:27:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:27:37 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:27:37 - Completed 200 OK
2024-06-04 16:27:39 - GET "/cart/list", parameters={}
2024-06-04 16:27:39 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:27:39 - GET "/products/list", parameters={}
2024-06-04 16:27:39 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:27:39 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:27:39 - Writing [[]]
2024-06-04 16:27:39 - Completed 200 OK
2024-06-04 16:27:39 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:27:39 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:27:39 - Completed 200 OK
2024-06-04 16:27:58 - GET "/cart/list", parameters={}
2024-06-04 16:27:58 - GET "/products/list", parameters={}
2024-06-04 16:27:58 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:27:58 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:27:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:27:58 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:27:58 - Completed 200 OK
2024-06-04 16:27:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:27:58 - Writing [[]]
2024-06-04 16:27:58 - Completed 200 OK
2024-06-04 16:28:32 - GET "/cart/list", parameters={}
2024-06-04 16:28:32 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:28:32 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:28:32 - Writing [[]]
2024-06-04 16:28:32 - Completed 200 OK
2024-06-04 16:28:57 - GET "/products/list", parameters={}
2024-06-04 16:28:57 - GET "/cart/list", parameters={}
2024-06-04 16:28:57 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:28:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:28:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:28:57 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:28:57 - Completed 200 OK
2024-06-04 16:28:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:28:57 - Writing [[]]
2024-06-04 16:28:58 - Completed 200 OK
2024-06-04 16:29:01 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:29:01 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:29:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:29:01 - Writing [com.example.ecommercemanagement.model.Cart@6511de6b]
2024-06-04 16:29:01 - Completed 201 CREATED
2024-06-04 16:29:04 - DELETE "/cart/remove?productId=960", parameters={masked}
2024-06-04 16:29:04 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:29:04 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:29:04 - Nothing to write: null body
2024-06-04 16:29:04 - Completed 200 OK
2024-06-04 16:29:56 - GET "/cart/list", parameters={}
2024-06-04 16:29:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:29:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:29:56 - Writing [[]]
2024-06-04 16:29:56 - Completed 200 OK
2024-06-04 16:29:58 - GET "/cart/list", parameters={}
2024-06-04 16:29:58 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:29:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:29:58 - Writing [[]]
2024-06-04 16:29:58 - Completed 200 OK
2024-06-04 16:30:02 - GET "/cart/list", parameters={}
2024-06-04 16:30:02 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:30:02 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:02 - Writing [[]]
2024-06-04 16:30:02 - Completed 200 OK
2024-06-04 16:30:08 - GET "/cart/list", parameters={}
2024-06-04 16:30:08 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:30:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:08 - Writing [[]]
2024-06-04 16:30:08 - Completed 200 OK
2024-06-04 16:30:19 - GET "/cart/list", parameters={}
2024-06-04 16:30:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:30:19 - GET "/products/list", parameters={}
2024-06-04 16:30:19 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:30:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:19 - Writing [[]]
2024-06-04 16:30:19 - Completed 200 OK
2024-06-04 16:30:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:19 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:30:19 - Completed 200 OK
2024-06-04 16:30:46 - GET "/cart/list", parameters={}
2024-06-04 16:30:46 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:30:46 - GET "/products/list", parameters={}
2024-06-04 16:30:46 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:30:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:46 - Writing [[]]
2024-06-04 16:30:46 - Completed 200 OK
2024-06-04 16:30:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:46 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:30:46 - Completed 200 OK
2024-06-04 16:30:49 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:30:49 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:30:49 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:49 - Writing [com.example.ecommercemanagement.model.Cart@b67dbd8]
2024-06-04 16:30:49 - Completed 201 CREATED
2024-06-04 16:30:51 - DELETE "/cart/remove?productId=961", parameters={masked}
2024-06-04 16:30:51 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:30:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:30:51 - Nothing to write: null body
2024-06-04 16:30:51 - Completed 200 OK
2024-06-04 16:31:27 - GET "/products/list", parameters={}
2024-06-04 16:31:27 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:31:27 - GET "/cart/list", parameters={}
2024-06-04 16:31:27 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:31:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:27 - Writing [[]]
2024-06-04 16:31:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:27 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:31:27 - Completed 200 OK
2024-06-04 16:31:27 - Completed 200 OK
2024-06-04 16:31:29 - GET "/cart/list", parameters={}
2024-06-04 16:31:29 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:31:29 - GET "/products/list", parameters={}
2024-06-04 16:31:29 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:31:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:29 - Writing [[]]
2024-06-04 16:31:29 - Completed 200 OK
2024-06-04 16:31:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:29 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:31:29 - Completed 200 OK
2024-06-04 16:31:33 - GET "/cart/list", parameters={}
2024-06-04 16:31:33 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:31:33 - GET "/products/list", parameters={}
2024-06-04 16:31:33 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:31:33 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:33 - Writing [[]]
2024-06-04 16:31:33 - Completed 200 OK
2024-06-04 16:31:33 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:33 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:31:33 - Completed 200 OK
2024-06-04 16:31:48 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:31:48 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:31:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:48 - Writing [com.example.ecommercemanagement.model.Cart@4eb39f13]
2024-06-04 16:31:48 - Completed 201 CREATED
2024-06-04 16:31:51 - DELETE "/cart/remove?productId=962", parameters={masked}
2024-06-04 16:31:51 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:31:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:31:51 - Nothing to write: null body
2024-06-04 16:31:51 - Completed 200 OK
2024-06-04 16:37:15 - GET "/cart/list", parameters={}
2024-06-04 16:37:15 - GET "/products/list", parameters={}
2024-06-04 16:37:15 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:37:15 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:37:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:15 - Writing [[]]
2024-06-04 16:37:15 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:37:15 - Completed 200 OK
2024-06-04 16:37:15 - Completed 200 OK
2024-06-04 16:37:23 - GET "/cart/list", parameters={}
2024-06-04 16:37:23 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:37:23 - GET "/products/list", parameters={}
2024-06-04 16:37:23 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:37:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:23 - Writing [[]]
2024-06-04 16:37:23 - Completed 200 OK
2024-06-04 16:37:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:23 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:37:23 - Completed 200 OK
2024-06-04 16:37:27 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:37:27 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:37:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:27 - Writing [com.example.ecommercemanagement.model.Cart@1deb2a6]
2024-06-04 16:37:27 - Completed 201 CREATED
2024-06-04 16:37:31 - DELETE "/cart/remove?productId=963", parameters={masked}
2024-06-04 16:37:31 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:37:31 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:31 - Nothing to write: null body
2024-06-04 16:37:31 - Completed 200 OK
2024-06-04 16:37:40 - GET "/cart/list", parameters={}
2024-06-04 16:37:40 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:37:40 - GET "/products/list", parameters={}
2024-06-04 16:37:40 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:37:40 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:40 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:37:40 - Writing [[]]
2024-06-04 16:37:40 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:37:40 - Completed 200 OK
2024-06-04 16:37:40 - Completed 200 OK
2024-06-04 16:38:21 - GET "/cart/list", parameters={}
2024-06-04 16:38:21 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:38:21 - GET "/products/list", parameters={}
2024-06-04 16:38:21 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:38:21 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:38:21 - Writing [[]]
2024-06-04 16:38:21 - Completed 200 OK
2024-06-04 16:38:21 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:38:21 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:38:21 - Completed 200 OK
2024-06-04 16:42:03 - GET "/cart/list", parameters={}
2024-06-04 16:42:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:42:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:03 - Writing [[]]
2024-06-04 16:42:03 - Completed 200 OK
2024-06-04 16:42:06 - GET "/cart/list", parameters={}
2024-06-04 16:42:06 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:42:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:06 - Writing [[]]
2024-06-04 16:42:06 - Completed 200 OK
2024-06-04 16:42:12 - GET "/cart/list", parameters={}
2024-06-04 16:42:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:42:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:12 - Writing [[]]
2024-06-04 16:42:12 - Completed 200 OK
2024-06-04 16:42:19 - GET "/cart/list", parameters={}
2024-06-04 16:42:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:42:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:19 - Writing [[]]
2024-06-04 16:42:19 - Completed 200 OK
2024-06-04 16:42:23 - GET "/cart/list", parameters={}
2024-06-04 16:42:23 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:42:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:23 - Writing [[]]
2024-06-04 16:42:23 - Completed 200 OK
2024-06-04 16:42:28 - GET "/cart/list", parameters={}
2024-06-04 16:42:28 - GET "/products/list", parameters={}
2024-06-04 16:42:28 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:42:28 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:42:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:28 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:42:28 - Completed 200 OK
2024-06-04 16:42:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:28 - Writing [[]]
2024-06-04 16:42:28 - Completed 200 OK
2024-06-04 16:42:34 - GET "/products/list", parameters={}
2024-06-04 16:42:34 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:42:34 - GET "/cart/list", parameters={}
2024-06-04 16:42:34 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:42:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:34 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:42:34 - Completed 200 OK
2024-06-04 16:42:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:42:34 - Writing [[]]
2024-06-04 16:42:34 - Completed 200 OK
2024-06-04 16:43:30 - GET "/products/list", parameters={}
2024-06-04 16:43:30 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:43:30 - GET "/cart/list", parameters={}
2024-06-04 16:43:30 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:43:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:43:30 - Writing [[]]
2024-06-04 16:43:30 - Completed 200 OK
2024-06-04 16:43:30 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:43:30 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:43:30 - Completed 200 OK
2024-06-04 16:43:33 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:43:33 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:43:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:43:34 - Writing [com.example.ecommercemanagement.model.Cart@7b71d9c6]
2024-06-04 16:43:34 - Completed 201 CREATED
2024-06-04 16:43:38 - DELETE "/cart/remove?productId=964", parameters={masked}
2024-06-04 16:43:38 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:43:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:43:38 - Nothing to write: null body
2024-06-04 16:43:38 - Completed 200 OK
2024-06-04 16:43:56 - GET "/cart/list", parameters={}
2024-06-04 16:43:56 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:43:56 - GET "/products/list", parameters={}
2024-06-04 16:43:56 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:43:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:43:56 - Writing [[]]
2024-06-04 16:43:56 - Completed 200 OK
2024-06-04 16:43:56 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:43:56 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:43:56 - Completed 200 OK
2024-06-04 16:44:02 - GET "/cart/list", parameters={}
2024-06-04 16:44:02 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:44:02 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:02 - Writing [[]]
2024-06-04 16:44:02 - Completed 200 OK
2024-06-04 16:44:02 - GET "/products/list", parameters={}
2024-06-04 16:44:02 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:44:02 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:02 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:44:02 - Completed 200 OK
2024-06-04 16:44:07 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:44:07 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:44:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:08 - Writing [com.example.ecommercemanagement.model.Cart@177d0c0b]
2024-06-04 16:44:08 - Completed 201 CREATED
2024-06-04 16:44:10 - DELETE "/cart/remove?productId=965", parameters={masked}
2024-06-04 16:44:10 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:44:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:10 - Nothing to write: null body
2024-06-04 16:44:10 - Completed 200 OK
2024-06-04 16:44:25 - GET "/cart/list", parameters={}
2024-06-04 16:44:25 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:44:25 - GET "/products/list", parameters={}
2024-06-04 16:44:25 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:44:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:25 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:44:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:25 - Writing [[]]
2024-06-04 16:44:25 - Completed 200 OK
2024-06-04 16:44:25 - Completed 200 OK
2024-06-04 16:44:28 - GET "/cart/list", parameters={}
2024-06-04 16:44:28 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:44:28 - GET "/products/list", parameters={}
2024-06-04 16:44:28 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:44:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:28 - Writing [[]]
2024-06-04 16:44:28 - Completed 200 OK
2024-06-04 16:44:28 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:28 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:44:28 - Completed 200 OK
2024-06-04 16:44:30 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:44:30 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:44:31 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:31 - Writing [com.example.ecommercemanagement.model.Cart@6f03bb85]
2024-06-04 16:44:31 - Completed 201 CREATED
2024-06-04 16:44:34 - DELETE "/cart/remove?productId=966", parameters={masked}
2024-06-04 16:44:34 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:44:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:34 - Nothing to write: null body
2024-06-04 16:44:34 - Completed 200 OK
2024-06-04 16:44:53 - GET "/cart/list", parameters={}
2024-06-04 16:44:53 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:44:53 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:44:53 - Writing [[]]
2024-06-04 16:44:53 - Completed 200 OK
2024-06-04 16:45:00 - GET "/cart/list", parameters={}
2024-06-04 16:45:00 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:45:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:45:00 - Writing [[]]
2024-06-04 16:45:00 - Completed 200 OK
2024-06-04 16:45:05 - GET "/cart/list", parameters={}
2024-06-04 16:45:05 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:45:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:45:05 - Writing [[]]
2024-06-04 16:45:05 - Completed 200 OK
2024-06-04 16:45:13 - GET "/cart/list", parameters={}
2024-06-04 16:45:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:45:13 - GET "/products/list", parameters={}
2024-06-04 16:45:13 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:45:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:45:13 - Writing [[]]
2024-06-04 16:45:13 - Completed 200 OK
2024-06-04 16:45:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:45:13 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:45:13 - Completed 200 OK
2024-06-04 16:45:15 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:45:15 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:45:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:45:15 - Writing [com.example.ecommercemanagement.model.Cart@ff27651]
2024-06-04 16:45:15 - Completed 201 CREATED
2024-06-04 16:45:18 - DELETE "/cart/remove?productId=967", parameters={masked}
2024-06-04 16:45:18 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:45:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:45:18 - Nothing to write: null body
2024-06-04 16:45:18 - Completed 200 OK
2024-06-04 16:48:08 - GET "/cart/list", parameters={}
2024-06-04 16:48:08 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:48:08 - GET "/products/list", parameters={}
2024-06-04 16:48:08 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:48:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:48:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:48:08 - Writing [[]]
2024-06-04 16:48:08 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:48:08 - Completed 200 OK
2024-06-04 16:48:08 - Completed 200 OK
2024-06-04 16:48:27 - GET "/cart/list", parameters={}
2024-06-04 16:48:27 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:48:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:48:27 - Writing [[]]
2024-06-04 16:48:27 - Completed 200 OK
2024-06-04 16:48:35 - GET "/cart/list", parameters={}
2024-06-04 16:48:35 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:48:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:48:35 - Writing [[]]
2024-06-04 16:48:35 - Completed 200 OK
2024-06-04 16:49:03 - GET "/cart/list", parameters={}
2024-06-04 16:49:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:49:03 - GET "/products/list", parameters={}
2024-06-04 16:49:03 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:49:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:49:03 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:49:03 - Completed 200 OK
2024-06-04 16:49:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:49:03 - Writing [[]]
2024-06-04 16:49:03 - Completed 200 OK
2024-06-04 16:49:06 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:49:06 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:49:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:49:06 - Writing [com.example.ecommercemanagement.model.Cart@664d9557]
2024-06-04 16:49:06 - Completed 201 CREATED
2024-06-04 16:49:08 - DELETE "/cart/remove?productId=968", parameters={masked}
2024-06-04 16:49:08 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:49:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:49:08 - Nothing to write: null body
2024-06-04 16:49:08 - Completed 200 OK
2024-06-04 16:49:14 - GET "/cart/list", parameters={}
2024-06-04 16:49:14 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:49:14 - GET "/products/list", parameters={}
2024-06-04 16:49:14 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:49:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:49:14 - Writing [[]]
2024-06-04 16:49:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:49:14 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:49:14 - Completed 200 OK
2024-06-04 16:49:14 - Completed 200 OK
2024-06-04 16:50:52 - GET "/cart/list", parameters={}
2024-06-04 16:50:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:50:52 - GET "/products/list", parameters={}
2024-06-04 16:50:52 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:50:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:50:52 - Writing [[]]
2024-06-04 16:50:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:50:52 - Completed 200 OK
2024-06-04 16:50:52 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:50:52 - Completed 200 OK
2024-06-04 16:51:02 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 16:51:02 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:51:02 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:51:02 - Writing [com.example.ecommercemanagement.model.Cart@2720e3a4]
2024-06-04 16:51:02 - Completed 201 CREATED
2024-06-04 16:51:04 - DELETE "/cart/remove?productId=969", parameters={masked}
2024-06-04 16:51:04 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:51:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:51:05 - Nothing to write: null body
2024-06-04 16:51:05 - Completed 200 OK
2024-06-04 16:53:55 - GET "/products/list", parameters={}
2024-06-04 16:53:55 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:53:55 - GET "/cart/list", parameters={}
2024-06-04 16:53:55 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:53:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:53:55 - Writing [[]]
2024-06-04 16:53:55 - Completed 200 OK
2024-06-04 16:53:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:53:55 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:53:55 - Completed 200 OK
2024-06-04 16:54:42 - GET "/cart/list", parameters={}
2024-06-04 16:54:42 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:54:42 - GET "/products/list", parameters={}
2024-06-04 16:54:42 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:54:42 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:54:42 - Writing [[]]
2024-06-04 16:54:42 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:54:42 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:54:42 - Completed 200 OK
2024-06-04 16:54:42 - Completed 200 OK
2024-06-04 16:54:55 - GET "/products/list", parameters={}
2024-06-04 16:54:55 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:54:55 - GET "/cart/list", parameters={}
2024-06-04 16:54:55 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:54:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:54:55 - Writing [[]]
2024-06-04 16:54:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:54:55 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:54:55 - Completed 200 OK
2024-06-04 16:54:55 - Completed 200 OK
2024-06-04 16:55:09 - GET "/cart/list", parameters={}
2024-06-04 16:55:09 - GET "/products/list", parameters={}
2024-06-04 16:55:09 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:55:09 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:55:09 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:55:09 - Writing [[]]
2024-06-04 16:55:09 - Completed 200 OK
2024-06-04 16:55:09 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:55:09 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:55:09 - Completed 200 OK
2024-06-04 16:55:33 - GET "/cart/list", parameters={}
2024-06-04 16:55:33 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:55:33 - GET "/products/list", parameters={}
2024-06-04 16:55:33 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:55:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:55:34 - Writing [[]]
2024-06-04 16:55:34 - Completed 200 OK
2024-06-04 16:55:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:55:34 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:55:34 - Completed 200 OK
2024-06-04 16:55:36 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 16:55:36 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:55:36 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:55:36 - Writing [com.example.ecommercemanagement.model.Cart@44b1baf5]
2024-06-04 16:55:36 - Completed 201 CREATED
2024-06-04 16:55:38 - DELETE "/cart/remove?productId=970", parameters={masked}
2024-06-04 16:55:38 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:55:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:55:38 - Nothing to write: null body
2024-06-04 16:55:38 - Completed 200 OK
2024-06-04 16:56:10 - GET "/cart/list", parameters={}
2024-06-04 16:56:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:56:10 - GET "/products/list", parameters={}
2024-06-04 16:56:10 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:56:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:56:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:56:10 - Writing [[]]
2024-06-04 16:56:10 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:56:10 - Completed 200 OK
2024-06-04 16:56:10 - Completed 200 OK
2024-06-04 16:56:18 - GET "/cart/list", parameters={}
2024-06-04 16:56:18 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 16:56:18 - GET "/products/list", parameters={}
2024-06-04 16:56:18 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 16:56:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:56:18 - Writing [[]]
2024-06-04 16:56:18 - Completed 200 OK
2024-06-04 16:56:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:56:18 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 16:56:18 - Completed 200 OK
2024-06-04 16:56:21 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 16:56:21 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 16:56:21 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:56:21 - Writing [com.example.ecommercemanagement.model.Cart@fe1723d]
2024-06-04 16:56:21 - Completed 201 CREATED
2024-06-04 16:56:24 - DELETE "/cart/remove?productId=971", parameters={masked}
2024-06-04 16:56:24 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 16:56:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 16:56:24 - Nothing to write: null body
2024-06-04 16:56:24 - Completed 200 OK
2024-06-04 17:13:52 - GET "/cart/list", parameters={}
2024-06-04 17:13:52 - GET "/products/list", parameters={}
2024-06-04 17:13:52 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:13:52 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:13:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:13:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:13:52 - Writing [[]]
2024-06-04 17:13:52 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:13:52 - Completed 200 OK
2024-06-04 17:13:52 - Completed 200 OK
2024-06-04 17:14:01 - GET "/cart/list", parameters={}
2024-06-04 17:14:01 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:14:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:14:01 - Writing [[]]
2024-06-04 17:14:01 - Completed 200 OK
2024-06-04 17:14:04 - GET "/cart/list", parameters={}
2024-06-04 17:14:04 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:14:04 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:14:04 - Writing [[]]
2024-06-04 17:14:04 - Completed 200 OK
2024-06-04 17:14:12 - GET "/cart/list", parameters={}
2024-06-04 17:14:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:14:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:14:12 - Writing [[]]
2024-06-04 17:14:12 - Completed 200 OK
2024-06-04 17:14:15 - GET "/cart/list", parameters={}
2024-06-04 17:14:15 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:14:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:14:15 - Writing [[]]
2024-06-04 17:14:15 - Completed 200 OK
2024-06-04 17:14:18 - GET "/cart/list", parameters={}
2024-06-04 17:14:18 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:14:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:14:18 - Writing [[]]
2024-06-04 17:14:18 - Completed 200 OK
2024-06-04 17:16:08 - GET "/cart/list", parameters={}
2024-06-04 17:16:08 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:16:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:16:08 - Writing [[]]
2024-06-04 17:16:08 - Completed 200 OK
2024-06-04 17:16:10 - GET "/cart/list", parameters={}
2024-06-04 17:16:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:16:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:16:10 - Writing [[]]
2024-06-04 17:16:10 - Completed 200 OK
2024-06-04 17:16:20 - GET "/cart/list", parameters={}
2024-06-04 17:16:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:16:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:16:20 - Writing [[]]
2024-06-04 17:16:20 - Completed 200 OK
2024-06-04 17:16:23 - GET "/cart/list", parameters={}
2024-06-04 17:16:23 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:16:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:16:23 - Writing [[]]
2024-06-04 17:16:23 - Completed 200 OK
2024-06-04 17:17:10 - GET "/cart/list", parameters={}
2024-06-04 17:17:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:17:10 - GET "/products/list", parameters={}
2024-06-04 17:17:10 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:17:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:10 - Writing [[]]
2024-06-04 17:17:10 - Completed 200 OK
2024-06-04 17:17:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:10 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:17:10 - Completed 200 OK
2024-06-04 17:17:13 - GET "/cart/list", parameters={}
2024-06-04 17:17:13 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:17:13 - GET "/products/list", parameters={}
2024-06-04 17:17:13 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:17:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:13 - Writing [[]]
2024-06-04 17:17:13 - Completed 200 OK
2024-06-04 17:17:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:13 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:17:13 - Completed 200 OK
2024-06-04 17:17:15 - GET "/cart/list", parameters={}
2024-06-04 17:17:15 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:17:15 - GET "/products/list", parameters={}
2024-06-04 17:17:15 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:17:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:15 - Writing [[]]
2024-06-04 17:17:15 - Completed 200 OK
2024-06-04 17:17:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:15 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:17:15 - Completed 200 OK
2024-06-04 17:17:20 - GET "/cart/list", parameters={}
2024-06-04 17:17:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:17:20 - GET "/products/list", parameters={}
2024-06-04 17:17:20 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:17:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:20 - Writing [[]]
2024-06-04 17:17:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:20 - Completed 200 OK
2024-06-04 17:17:20 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:17:20 - Completed 200 OK
2024-06-04 17:17:41 - GET "/cart/list", parameters={}
2024-06-04 17:17:41 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:17:41 - GET "/products/list", parameters={}
2024-06-04 17:17:41 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:17:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:41 - Writing [[]]
2024-06-04 17:17:41 - Completed 200 OK
2024-06-04 17:17:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:41 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:17:41 - Completed 200 OK
2024-06-04 17:17:46 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 17:17:46 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:17:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:46 - Writing [com.example.ecommercemanagement.model.Cart@197d4346]
2024-06-04 17:17:46 - Completed 201 CREATED
2024-06-04 17:17:49 - DELETE "/cart/remove?productId=972", parameters={masked}
2024-06-04 17:17:49 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:17:49 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:17:49 - Nothing to write: null body
2024-06-04 17:17:49 - Completed 200 OK
2024-06-04 17:32:34 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 17:32:34 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:32:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:32:34 - Writing [com.example.ecommercemanagement.model.Cart@176017a5]
2024-06-04 17:32:34 - Completed 201 CREATED
2024-06-04 17:32:37 - DELETE "/cart/remove?productId=973", parameters={masked}
2024-06-04 17:32:37 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:32:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:32:37 - Nothing to write: null body
2024-06-04 17:32:37 - Completed 200 OK
2024-06-04 17:33:06 - GET "/cart/list", parameters={}
2024-06-04 17:33:06 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:33:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:33:06 - Writing [[]]
2024-06-04 17:33:06 - GET "/products/list", parameters={}
2024-06-04 17:33:06 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:33:06 - Completed 200 OK
2024-06-04 17:33:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:33:06 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:33:06 - Completed 200 OK
2024-06-04 17:33:16 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 17:33:16 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:33:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:33:16 - Writing [com.example.ecommercemanagement.model.Cart@652e24d0]
2024-06-04 17:33:16 - Completed 201 CREATED
2024-06-04 17:33:19 - DELETE "/cart/remove?productId=974", parameters={masked}
2024-06-04 17:33:19 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:33:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:33:19 - Nothing to write: null body
2024-06-04 17:33:19 - Completed 200 OK
2024-06-04 17:37:22 - GET "/cart/list", parameters={}
2024-06-04 17:37:22 - GET "/products/list", parameters={}
2024-06-04 17:37:22 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:37:22 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:37:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:22 - Writing [[]]
2024-06-04 17:37:22 - Completed 200 OK
2024-06-04 17:37:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:22 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:37:22 - Completed 200 OK
2024-06-04 17:37:24 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 17:37:24 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:37:24 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:24 - Writing [com.example.ecommercemanagement.model.Cart@3c49c27e]
2024-06-04 17:37:24 - Completed 201 CREATED
2024-06-04 17:37:25 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 17:37:25 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:37:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:25 - Writing [com.example.ecommercemanagement.model.Cart@10bfa52e]
2024-06-04 17:37:25 - Completed 201 CREATED
2024-06-04 17:37:26 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 17:37:26 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:37:26 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:26 - Writing [com.example.ecommercemanagement.model.Cart@5390b5ec]
2024-06-04 17:37:26 - Completed 201 CREATED
2024-06-04 17:37:29 - DELETE "/cart/remove?productId=975", parameters={masked}
2024-06-04 17:37:29 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:37:29 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:29 - Nothing to write: null body
2024-06-04 17:37:29 - Completed 200 OK
2024-06-04 17:37:31 - DELETE "/cart/remove?productId=976", parameters={masked}
2024-06-04 17:37:31 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:37:31 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:31 - Nothing to write: null body
2024-06-04 17:37:31 - Completed 200 OK
2024-06-04 17:37:32 - DELETE "/cart/remove?productId=977", parameters={masked}
2024-06-04 17:37:32 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:37:32 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:32 - Nothing to write: null body
2024-06-04 17:37:32 - Completed 200 OK
2024-06-04 17:37:36 - GET "/cart/list", parameters={}
2024-06-04 17:37:36 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:37:36 - GET "/products/list", parameters={}
2024-06-04 17:37:36 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:37:36 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:36 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:36 - Writing [[]]
2024-06-04 17:37:36 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:37:36 - Completed 200 OK
2024-06-04 17:37:36 - Completed 200 OK
2024-06-04 17:37:40 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 17:37:40 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:37:40 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:40 - Writing [com.example.ecommercemanagement.model.Cart@8c09a41]
2024-06-04 17:37:40 - Completed 201 CREATED
2024-06-04 17:37:41 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 17:37:41 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:37:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:41 - Writing [com.example.ecommercemanagement.model.Cart@7952903c]
2024-06-04 17:37:41 - Completed 201 CREATED
2024-06-04 17:37:42 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 17:37:42 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:37:42 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:42 - Writing [com.example.ecommercemanagement.model.Cart@4f14eb7a]
2024-06-04 17:37:42 - Completed 201 CREATED
2024-06-04 17:37:50 - DELETE "/cart/remove?productId=979", parameters={masked}
2024-06-04 17:37:50 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:37:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:50 - Nothing to write: null body
2024-06-04 17:37:50 - Completed 200 OK
2024-06-04 17:37:54 - DELETE "/cart/remove?productId=978", parameters={masked}
2024-06-04 17:37:54 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:37:54 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:37:54 - Nothing to write: null body
2024-06-04 17:37:54 - Completed 200 OK
2024-06-04 17:38:01 - DELETE "/cart/remove?productId=980", parameters={masked}
2024-06-04 17:38:01 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:38:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:38:01 - Nothing to write: null body
2024-06-04 17:38:01 - Completed 200 OK
2024-06-04 17:38:11 - GET "/cart/list", parameters={}
2024-06-04 17:38:11 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:38:11 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:38:11 - Writing [[]]
2024-06-04 17:38:11 - Completed 200 OK
2024-06-04 17:38:14 - GET "/cart/list", parameters={}
2024-06-04 17:38:14 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:38:14 - GET "/products/list", parameters={}
2024-06-04 17:38:14 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:38:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:38:14 - Writing [[]]
2024-06-04 17:38:14 - Completed 200 OK
2024-06-04 17:38:14 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:38:14 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:38:14 - Completed 200 OK
2024-06-04 17:40:51 - GET "/cart/list", parameters={}
2024-06-04 17:40:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:40:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:40:51 - Writing [[]]
2024-06-04 17:40:51 - Completed 200 OK
2024-06-04 17:41:03 - GET "/cart/list", parameters={}
2024-06-04 17:41:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:41:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:03 - Writing [[]]
2024-06-04 17:41:03 - Completed 200 OK
2024-06-04 17:41:10 - GET "/products/list", parameters={}
2024-06-04 17:41:10 - GET "/cart/list", parameters={}
2024-06-04 17:41:10 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:41:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:41:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:10 - Writing [[]]
2024-06-04 17:41:10 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:41:10 - Completed 200 OK
2024-06-04 17:41:10 - Completed 200 OK
2024-06-04 17:41:12 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 17:41:12 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:41:12 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:12 - Writing [com.example.ecommercemanagement.model.Cart@34f33698]
2024-06-04 17:41:12 - Completed 201 CREATED
2024-06-04 17:41:12 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 17:41:12 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:41:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:13 - Writing [com.example.ecommercemanagement.model.Cart@7c2a9c95]
2024-06-04 17:41:13 - Completed 201 CREATED
2024-06-04 17:41:13 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 17:41:13 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:41:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:13 - Writing [com.example.ecommercemanagement.model.Cart@45a56dbb]
2024-06-04 17:41:13 - Completed 201 CREATED
2024-06-04 17:41:15 - DELETE "/cart/remove?productId=981", parameters={masked}
2024-06-04 17:41:15 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:41:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:15 - Nothing to write: null body
2024-06-04 17:41:15 - Completed 200 OK
2024-06-04 17:41:17 - DELETE "/cart/remove?productId=983", parameters={masked}
2024-06-04 17:41:17 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:41:17 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:17 - Nothing to write: null body
2024-06-04 17:41:17 - Completed 200 OK
2024-06-04 17:41:18 - DELETE "/cart/remove?productId=982", parameters={masked}
2024-06-04 17:41:18 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:41:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:18 - Nothing to write: null body
2024-06-04 17:41:18 - Completed 200 OK
2024-06-04 17:41:59 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 17:41:59 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:41:59 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:41:59 - Writing [com.example.ecommercemanagement.model.Cart@622a1718]
2024-06-04 17:41:59 - Completed 201 CREATED
2024-06-04 17:42:01 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 17:42:01 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:42:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:42:01 - Writing [com.example.ecommercemanagement.model.Cart@3998f613]
2024-06-04 17:42:01 - Completed 201 CREATED
2024-06-04 17:42:03 - POST "/cart/add?productId=5&quantity=1", parameters={masked}
2024-06-04 17:42:03 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:42:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:42:03 - Writing [com.example.ecommercemanagement.model.Cart@1c23e76f]
2024-06-04 17:42:03 - Completed 201 CREATED
2024-06-04 17:42:06 - DELETE "/cart/remove?productId=986", parameters={masked}
2024-06-04 17:42:06 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:42:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:42:06 - Nothing to write: null body
2024-06-04 17:42:06 - Completed 200 OK
2024-06-04 17:42:07 - DELETE "/cart/remove?productId=985", parameters={masked}
2024-06-04 17:42:07 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:42:07 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:42:07 - Nothing to write: null body
2024-06-04 17:42:07 - Completed 200 OK
2024-06-04 17:42:08 - DELETE "/cart/remove?productId=984", parameters={masked}
2024-06-04 17:42:08 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 17:42:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:42:08 - Nothing to write: null body
2024-06-04 17:42:08 - Completed 200 OK
2024-06-04 17:44:39 - GET "/cart/list", parameters={}
2024-06-04 17:44:39 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:44:39 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:44:39 - Writing [[]]
2024-06-04 17:44:39 - Completed 200 OK
2024-06-04 17:47:46 - GET "/products/list", parameters={}
2024-06-04 17:47:46 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:47:46 - GET "/cart/list", parameters={}
2024-06-04 17:47:46 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:47:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:47:46 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:47:46 - Writing [[]]
2024-06-04 17:47:46 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:47:46 - Completed 200 OK
2024-06-04 17:47:46 - Completed 200 OK
2024-06-04 17:48:03 - GET "/cart/list", parameters={}
2024-06-04 17:48:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:48:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:48:03 - Writing [[]]
2024-06-04 17:48:03 - Completed 200 OK
2024-06-04 17:51:06 - GET "/cart/list", parameters={}
2024-06-04 17:51:06 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:51:06 - GET "/products/list", parameters={}
2024-06-04 17:51:06 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 17:51:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:51:06 - Writing [[]]
2024-06-04 17:51:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:51:06 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 17:51:06 - Completed 200 OK
2024-06-04 17:51:06 - Completed 200 OK
2024-06-04 17:51:16 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 17:51:16 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 17:51:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:51:16 - Writing [com.example.ecommercemanagement.model.Cart@14f98889]
2024-06-04 17:51:16 - Completed 201 CREATED
2024-06-04 17:51:19 - GET "/cart/list", parameters={}
2024-06-04 17:51:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:51:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:51:19 - Writing [[com.example.ecommercemanagement.model.Cart@51853a9a]]
2024-06-04 17:51:19 - Completed 200 OK
2024-06-04 17:54:00 - GET "/cart/list", parameters={}
2024-06-04 17:54:00 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:54:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:54:00 - Writing [[com.example.ecommercemanagement.model.Cart@7271fdea]]
2024-06-04 17:54:00 - Completed 200 OK
2024-06-04 17:54:55 - GET "/cart/list", parameters={}
2024-06-04 17:54:55 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:54:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:54:55 - Writing [[com.example.ecommercemanagement.model.Cart@139daa19]]
2024-06-04 17:54:55 - Completed 200 OK
2024-06-04 17:54:59 - GET "/cart/list", parameters={}
2024-06-04 17:54:59 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:54:59 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:54:59 - Writing [[com.example.ecommercemanagement.model.Cart@6fd48c4f]]
2024-06-04 17:54:59 - Completed 200 OK
2024-06-04 17:56:02 - GET "/cart/list", parameters={}
2024-06-04 17:56:02 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 17:56:02 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 17:56:02 - Writing [[com.example.ecommercemanagement.model.Cart@6355e5a6]]
2024-06-04 17:56:02 - Completed 200 OK
2024-06-04 18:12:01 - GET "/cart/list", parameters={}
2024-06-04 18:12:01 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:12:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:12:01 - Writing [[com.example.ecommercemanagement.model.Cart@6380f9a0]]
2024-06-04 18:12:01 - Completed 200 OK
2024-06-04 18:12:15 - GET "/cart/list", parameters={}
2024-06-04 18:12:15 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:12:15 - GET "/products/list", parameters={}
2024-06-04 18:12:15 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:12:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:12:15 - Writing [[com.example.ecommercemanagement.model.Cart@50f4c7c1]]
2024-06-04 18:12:15 - Completed 200 OK
2024-06-04 18:12:15 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:12:15 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:12:15 - Completed 200 OK
2024-06-04 18:12:22 - GET "/cart/list", parameters={}
2024-06-04 18:12:22 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:12:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:12:22 - Writing [[com.example.ecommercemanagement.model.Cart@2dd41b9a]]
2024-06-04 18:12:22 - Completed 200 OK
2024-06-04 18:21:03 - GET "/cart/list", parameters={}
2024-06-04 18:21:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:21:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:21:03 - Writing [[com.example.ecommercemanagement.model.Cart@362353a1]]
2024-06-04 18:21:03 - Completed 200 OK
2024-06-04 18:21:23 - GET "/cart/list", parameters={}
2024-06-04 18:21:23 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:21:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:21:23 - Writing [[com.example.ecommercemanagement.model.Cart@2ba2df8f]]
2024-06-04 18:21:23 - Completed 200 OK
2024-06-04 18:21:23 - GET "/products/list", parameters={}
2024-06-04 18:21:23 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:21:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:21:23 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:21:23 - Completed 200 OK
2024-06-04 18:21:50 - GET "/cart/list", parameters={}
2024-06-04 18:21:50 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:21:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:21:50 - Writing [[com.example.ecommercemanagement.model.Cart@6d8bbf53]]
2024-06-04 18:21:50 - Completed 200 OK
2024-06-04 18:21:57 - POST "/auth/login", parameters={}
2024-06-04 18:21:57 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 18:21:57 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 18:21:57 - Username: devjahrel@gmail.com 
2024-06-04 18:21:58 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:21:58 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@5cc08a39]
2024-06-04 18:21:58 - Completed 200 OK
2024-06-04 18:21:59 - GET "/cart/list", parameters={}
2024-06-04 18:21:59 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:21:59 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:21:59 - Writing [[com.example.ecommercemanagement.model.Cart@36b20078]]
2024-06-04 18:21:59 - Completed 200 OK
2024-06-04 18:22:04 - GET "/cart/list", parameters={}
2024-06-04 18:22:04 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:22:04 - GET "/products/list", parameters={}
2024-06-04 18:22:04 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:22:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:22:05 - Writing [[com.example.ecommercemanagement.model.Cart@a0c0885]]
2024-06-04 18:22:05 - Completed 200 OK
2024-06-04 18:22:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:22:05 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:22:05 - Completed 200 OK
2024-06-04 18:22:11 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 18:22:11 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 18:22:11 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:22:11 - Writing [com.example.ecommercemanagement.model.Cart@65e8d218]
2024-06-04 18:22:11 - Completed 201 CREATED
2024-06-04 18:22:16 - GET "/cart/list", parameters={}
2024-06-04 18:22:16 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:22:17 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:22:17 - Writing [[com.example.ecommercemanagement.model.Cart@2fa85808, com.example.ecommercemanagement.model.Cart@517 (truncated)...]
2024-06-04 18:22:17 - Completed 200 OK
2024-06-04 18:31:59 - GET "/cart/list", parameters={}
2024-06-04 18:31:59 - GET "/products/list", parameters={}
2024-06-04 18:31:59 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:31:59 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:32:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:32:00 - Writing [[com.example.ecommercemanagement.model.Cart@3e0d84cc, com.example.ecommercemanagement.model.Cart@4b6 (truncated)...]
2024-06-04 18:32:00 - Completed 200 OK
2024-06-04 18:32:00 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:32:00 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:32:00 - Completed 200 OK
2024-06-04 18:32:02 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 18:32:02 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 18:32:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:32:03 - Writing [com.example.ecommercemanagement.model.Cart@772bd8a5]
2024-06-04 18:32:03 - Completed 201 CREATED
2024-06-04 18:32:10 - GET "/cart/list", parameters={}
2024-06-04 18:32:10 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:32:10 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:32:10 - Writing [[com.example.ecommercemanagement.model.Cart@482dbcbb, com.example.ecommercemanagement.model.Cart@4b1 (truncated)...]
2024-06-04 18:32:10 - Completed 200 OK
2024-06-04 18:39:51 - GET "/cart/list", parameters={}
2024-06-04 18:39:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:39:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:39:51 - Writing [[com.example.ecommercemanagement.model.Cart@5b5f456c, com.example.ecommercemanagement.model.Cart@594 (truncated)...]
2024-06-04 18:39:51 - Completed 200 OK
2024-06-04 18:39:54 - GET "/cart/list", parameters={}
2024-06-04 18:39:54 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:39:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:39:55 - Writing [[com.example.ecommercemanagement.model.Cart@6917387c, com.example.ecommercemanagement.model.Cart@3e3 (truncated)...]
2024-06-04 18:39:55 - Completed 200 OK
2024-06-04 18:40:19 - GET "/cart/list", parameters={}
2024-06-04 18:40:19 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:40:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:40:19 - Writing [[com.example.ecommercemanagement.model.Cart@6636a1fb, com.example.ecommercemanagement.model.Cart@52c (truncated)...]
2024-06-04 18:40:19 - Completed 200 OK
2024-06-04 18:40:23 - GET "/cart/list", parameters={}
2024-06-04 18:40:23 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:40:23 - GET "/products/list", parameters={}
2024-06-04 18:40:23 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:40:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:40:23 - Writing [[com.example.ecommercemanagement.model.Cart@77c0f0c, com.example.ecommercemanagement.model.Cart@ed6b (truncated)...]
2024-06-04 18:40:23 - Completed 200 OK
2024-06-04 18:40:23 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:40:23 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:40:23 - Completed 200 OK
2024-06-04 18:40:37 - GET "/cart/list", parameters={}
2024-06-04 18:40:37 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:40:37 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:40:37 - Writing [[com.example.ecommercemanagement.model.Cart@44f1e482, com.example.ecommercemanagement.model.Cart@6f5 (truncated)...]
2024-06-04 18:40:37 - Completed 200 OK
2024-06-04 18:41:50 - GET "/cart/list", parameters={}
2024-06-04 18:41:50 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:41:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:41:50 - Writing [[com.example.ecommercemanagement.model.Cart@41be9a96, com.example.ecommercemanagement.model.Cart@318 (truncated)...]
2024-06-04 18:41:51 - Completed 200 OK
2024-06-04 18:44:48 - GET "/cart/list", parameters={}
2024-06-04 18:44:48 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:44:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:44:48 - Writing [[com.example.ecommercemanagement.model.Cart@22702890, com.example.ecommercemanagement.model.Cart@187 (truncated)...]
2024-06-04 18:44:48 - Completed 200 OK
2024-06-04 18:45:01 - GET "/cart/list", parameters={}
2024-06-04 18:45:01 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:45:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:45:01 - Writing [[com.example.ecommercemanagement.model.Cart@60f063a0, com.example.ecommercemanagement.model.Cart@1e2 (truncated)...]
2024-06-04 18:45:01 - Completed 200 OK
2024-06-04 18:48:31 - GET "/cart/list", parameters={}
2024-06-04 18:48:31 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:48:31 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:48:31 - Writing [[com.example.ecommercemanagement.model.Cart@766b57b3, com.example.ecommercemanagement.model.Cart@7c3 (truncated)...]
2024-06-04 18:48:31 - Completed 200 OK
2024-06-04 18:49:38 - GET "/cart/list", parameters={}
2024-06-04 18:49:38 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:49:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:49:38 - Writing [[com.example.ecommercemanagement.model.Cart@1cf85ef9, com.example.ecommercemanagement.model.Cart@15f (truncated)...]
2024-06-04 18:49:38 - Completed 200 OK
2024-06-04 18:52:51 - GET "/cart/list", parameters={}
2024-06-04 18:52:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:52:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:52:51 - Writing [[com.example.ecommercemanagement.model.Cart@6c0ecfc6, com.example.ecommercemanagement.model.Cart@513 (truncated)...]
2024-06-04 18:52:51 - Completed 200 OK
2024-06-04 18:53:03 - GET "/cart/list", parameters={}
2024-06-04 18:53:03 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:53:03 - GET "/products/list", parameters={}
2024-06-04 18:53:03 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:53:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:53:03 - Writing [[com.example.ecommercemanagement.model.Cart@6ba94b51, com.example.ecommercemanagement.model.Cart@2e5 (truncated)...]
2024-06-04 18:53:03 - Completed 200 OK
2024-06-04 18:53:03 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:53:03 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:53:03 - Completed 200 OK
2024-06-04 18:53:07 - GET "/products/list/search?title=Xiaomi", parameters={masked}
2024-06-04 18:53:07 - Mapped to com.example.ecommercemanagement.controller.ProductController#findProductByTitle(String)
2024-06-04 18:53:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:53:08 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:53:08 - Completed 200 OK
2024-06-04 18:53:08 - GET "/products/list/search?title=Xiaomi", parameters={masked}
2024-06-04 18:53:08 - Mapped to com.example.ecommercemanagement.controller.ProductController#findProductByTitle(String)
2024-06-04 18:53:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:53:08 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:53:08 - Completed 200 OK
2024-06-04 18:53:08 - GET "/products/list/search?title=Xiaomi", parameters={masked}
2024-06-04 18:53:08 - Mapped to com.example.ecommercemanagement.controller.ProductController#findProductByTitle(String)
2024-06-04 18:53:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:53:08 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:53:08 - Completed 200 OK
2024-06-04 18:53:08 - GET "/products/list/search?title=Xiaomi", parameters={masked}
2024-06-04 18:53:08 - Mapped to com.example.ecommercemanagement.controller.ProductController#findProductByTitle(String)
2024-06-04 18:53:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:53:08 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:53:08 - Completed 200 OK
2024-06-04 18:53:08 - GET "/products/list/search?title=Xiaomi", parameters={masked}
2024-06-04 18:53:08 - Mapped to com.example.ecommercemanagement.controller.ProductController#findProductByTitle(String)
2024-06-04 18:53:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:53:08 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:53:08 - Completed 200 OK
2024-06-04 18:58:18 - GET "/products/list", parameters={}
2024-06-04 18:58:18 - GET "/cart/list", parameters={}
2024-06-04 18:58:18 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:58:18 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:58:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:58:18 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:58:18 - Completed 200 OK
2024-06-04 18:58:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:58:19 - Writing [[com.example.ecommercemanagement.model.Cart@181659a0, com.example.ecommercemanagement.model.Cart@3e6 (truncated)...]
2024-06-04 18:58:19 - Completed 200 OK
2024-06-04 18:59:50 - GET "/cart/list", parameters={}
2024-06-04 18:59:50 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 18:59:50 - GET "/products/list", parameters={}
2024-06-04 18:59:50 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 18:59:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:59:50 - Writing [[com.example.ecommercemanagement.model.Cart@4aa53a0e, com.example.ecommercemanagement.model.Cart@5b3 (truncated)...]
2024-06-04 18:59:50 - Completed 200 OK
2024-06-04 18:59:50 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 18:59:50 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 18:59:50 - Completed 200 OK
2024-06-04 19:01:51 - GET "/cart/list", parameters={}
2024-06-04 19:01:51 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:01:51 - GET "/products/list", parameters={}
2024-06-04 19:01:51 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:01:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:01:51 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:01:51 - Writing [[com.example.ecommercemanagement.model.Cart@54bc0b91, com.example.ecommercemanagement.model.Cart@4e1 (truncated)...]
2024-06-04 19:01:51 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:01:51 - Completed 200 OK
2024-06-04 19:01:51 - Completed 200 OK
2024-06-04 19:02:55 - GET "/products/list", parameters={}
2024-06-04 19:02:55 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:02:55 - GET "/cart/list", parameters={}
2024-06-04 19:02:55 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:02:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:02:55 - Writing [[com.example.ecommercemanagement.model.Cart@1c119aae, com.example.ecommercemanagement.model.Cart@5f0 (truncated)...]
2024-06-04 19:02:55 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:02:55 - Completed 200 OK
2024-06-04 19:02:55 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:02:55 - Completed 200 OK
2024-06-04 19:05:31 - GET "/cart/list", parameters={}
2024-06-04 19:05:31 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:05:31 - GET "/products/list", parameters={}
2024-06-04 19:05:31 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:05:31 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:05:31 - Writing [[com.example.ecommercemanagement.model.Cart@33d280f1, com.example.ecommercemanagement.model.Cart@333 (truncated)...]
2024-06-04 19:05:31 - Completed 200 OK
2024-06-04 19:05:32 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:05:32 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:05:32 - Completed 200 OK
2024-06-04 19:05:38 - GET "/products/list", parameters={}
2024-06-04 19:05:38 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:05:38 - GET "/cart/list", parameters={}
2024-06-04 19:05:38 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:05:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:05:38 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:05:38 - Writing [[com.example.ecommercemanagement.model.Cart@641fad03, com.example.ecommercemanagement.model.Cart@78b (truncated)...]
2024-06-04 19:05:38 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:05:38 - Completed 200 OK
2024-06-04 19:05:38 - Completed 200 OK
2024-06-04 19:06:06 - GET "/cart/list", parameters={}
2024-06-04 19:06:06 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:06:06 - GET "/products/list", parameters={}
2024-06-04 19:06:06 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:06:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:06:06 - Writing [[com.example.ecommercemanagement.model.Cart@4e7e6c28, com.example.ecommercemanagement.model.Cart@5b0 (truncated)...]
2024-06-04 19:06:06 - Completed 200 OK
2024-06-04 19:06:06 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:06:06 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:06:06 - Completed 200 OK
2024-06-04 19:06:18 - GET "/cart/list", parameters={}
2024-06-04 19:06:18 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:06:18 - GET "/products/list", parameters={}
2024-06-04 19:06:18 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:06:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:06:18 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:06:18 - Completed 200 OK
2024-06-04 19:06:18 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:06:18 - Writing [[com.example.ecommercemanagement.model.Cart@666c2ab5, com.example.ecommercemanagement.model.Cart@698 (truncated)...]
2024-06-04 19:06:18 - Completed 200 OK
2024-06-04 19:06:45 - GET "/cart/list", parameters={}
2024-06-04 19:06:45 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:06:45 - GET "/products/list", parameters={}
2024-06-04 19:06:45 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:06:45 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:06:45 - Writing [[com.example.ecommercemanagement.model.Cart@35873c2e, com.example.ecommercemanagement.model.Cart@fe9 (truncated)...]
2024-06-04 19:06:45 - Completed 200 OK
2024-06-04 19:06:45 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:06:45 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:06:45 - Completed 200 OK
2024-06-04 19:08:48 - GET "/cart/list", parameters={}
2024-06-04 19:08:48 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:08:48 - GET "/products/list", parameters={}
2024-06-04 19:08:48 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:08:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:08:48 - Writing [[com.example.ecommercemanagement.model.Cart@70ad95b5, com.example.ecommercemanagement.model.Cart@2e6 (truncated)...]
2024-06-04 19:08:48 - Completed 200 OK
2024-06-04 19:08:48 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:08:48 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:08:48 - Completed 200 OK
2024-06-04 19:08:51 - DELETE "/cart/remove?productId=989", parameters={masked}
2024-06-04 19:08:51 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 19:08:53 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:08:53 - Nothing to write: null body
2024-06-04 19:08:53 - Completed 200 OK
2024-06-04 19:08:59 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:08:59 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:08:59 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:08:59 - Writing [com.example.ecommercemanagement.model.Cart@5e2b81fc]
2024-06-04 19:08:59 - Completed 201 CREATED
2024-06-04 19:12:20 - GET "/cart/list", parameters={}
2024-06-04 19:12:20 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:12:20 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:12:20 - Writing [[com.example.ecommercemanagement.model.Cart@114a3821]]
2024-06-04 19:12:20 - Completed 200 OK
2024-06-04 19:12:27 - GET "/cart/list", parameters={}
2024-06-04 19:12:27 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:12:27 - GET "/products/list", parameters={}
2024-06-04 19:12:27 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:12:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:12:27 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:12:27 - Completed 200 OK
2024-06-04 19:12:27 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:12:27 - Writing [[com.example.ecommercemanagement.model.Cart@48546064]]
2024-06-04 19:12:27 - Completed 200 OK
2024-06-04 19:12:31 - POST "/cart/add?productId=6&quantity=1", parameters={masked}
2024-06-04 19:12:31 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:12:31 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:12:31 - Writing [com.example.ecommercemanagement.model.Cart@7c3bdcfd]
2024-06-04 19:12:31 - Completed 201 CREATED
2024-06-04 19:12:41 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 19:12:41 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:12:41 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:12:41 - Writing [com.example.ecommercemanagement.model.Cart@100f7a41]
2024-06-04 19:12:41 - Completed 201 CREATED
2024-06-04 19:17:42 - GET "/cart/list", parameters={}
2024-06-04 19:17:42 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:17:42 - GET "/products/list", parameters={}
2024-06-04 19:17:42 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:17:42 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:17:42 - Writing [[com.example.ecommercemanagement.model.Cart@7789f291, com.example.ecommercemanagement.model.Cart@5db (truncated)...]
2024-06-04 19:17:42 - Completed 200 OK
2024-06-04 19:17:42 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:17:42 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:17:42 - Completed 200 OK
2024-06-04 19:18:11 - GET "/products/list", parameters={}
2024-06-04 19:18:11 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:18:11 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:18:11 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:18:11 - Completed 200 OK
2024-06-04 19:18:59 - POST "/cart/add?productId=2&quantity=1", parameters={masked}
2024-06-04 19:18:59 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:18:59 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:18:59 - Writing [com.example.ecommercemanagement.model.Cart@6ab0a58a]
2024-06-04 19:18:59 - Completed 201 CREATED
2024-06-04 19:19:12 - GET "/cart/list", parameters={}
2024-06-04 19:19:12 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:19:12 - GET "/products/list", parameters={}
2024-06-04 19:19:12 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:19:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:19:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:19:13 - Writing [[com.example.ecommercemanagement.model.Cart@5041d901, com.example.ecommercemanagement.model.Cart@5c0 (truncated)...]
2024-06-04 19:19:13 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:19:13 - Completed 200 OK
2024-06-04 19:19:13 - Completed 200 OK
2024-06-04 19:19:18 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:19:18 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:19:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:19:19 - Writing [com.example.ecommercemanagement.model.Cart@74477f37]
2024-06-04 19:19:19 - Completed 201 CREATED
2024-06-04 19:19:19 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:19:19 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:19:19 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:19:19 - Writing [com.example.ecommercemanagement.model.Cart@32be4d2b]
2024-06-04 19:19:19 - Completed 201 CREATED
2024-06-04 19:21:57 - GET "/cart/list", parameters={}
2024-06-04 19:21:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:21:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:21:57 - Writing [[com.example.ecommercemanagement.model.Cart@4ac600a4, com.example.ecommercemanagement.model.Cart@2a4 (truncated)...]
2024-06-04 19:21:57 - Completed 200 OK
2024-06-04 19:22:22 - GET "/cart/list", parameters={}
2024-06-04 19:22:22 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:22:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:22:22 - Writing [[com.example.ecommercemanagement.model.Cart@55de148c, com.example.ecommercemanagement.model.Cart@43a (truncated)...]
2024-06-04 19:22:22 - Completed 200 OK
2024-06-04 19:22:22 - GET "/products/list", parameters={}
2024-06-04 19:22:22 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:22:22 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:22:22 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:22:22 - Completed 200 OK
2024-06-04 19:22:25 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 19:22:25 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:22:25 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:22:25 - Writing [com.example.ecommercemanagement.model.Cart@cfbd39e]
2024-06-04 19:22:25 - Completed 201 CREATED
2024-06-04 19:27:09 - GET "/products/list", parameters={}
2024-06-04 19:27:09 - GET "/cart/list", parameters={}
2024-06-04 19:27:09 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:27:09 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:27:09 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:27:09 - Writing [[com.example.ecommercemanagement.model.Cart@5d111d5, com.example.ecommercemanagement.model.Cart@7372 (truncated)...]
2024-06-04 19:27:09 - Completed 200 OK
2024-06-04 19:27:09 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:27:09 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:27:09 - Completed 200 OK
2024-06-04 19:27:35 - GET "/cart/list", parameters={}
2024-06-04 19:27:35 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:27:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:27:35 - Writing [[com.example.ecommercemanagement.model.Cart@3907aa91, com.example.ecommercemanagement.model.Cart@50a (truncated)...]
2024-06-04 19:27:35 - Completed 200 OK
2024-06-04 19:27:35 - GET "/products/list", parameters={}
2024-06-04 19:27:35 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:27:35 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:27:35 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:27:35 - Completed 200 OK
2024-06-04 19:28:15 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:28:15 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:28:16 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:28:16 - Writing [com.example.ecommercemanagement.model.Cart@5593b712]
2024-06-04 19:28:16 - Completed 201 CREATED
2024-06-04 19:28:25 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:28:25 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:28:26 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:28:26 - Writing [com.example.ecommercemanagement.model.Cart@7706d7b0]
2024-06-04 19:28:26 - Completed 201 CREATED
2024-06-04 19:28:49 - DELETE "/cart/remove", parameters={}
2024-06-04 19:28:49 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 19:28:49 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:28:49 - Nothing to write: null body
2024-06-04 19:28:49 - Completed 200 OK
2024-06-04 19:28:57 - GET "/cart/list", parameters={}
2024-06-04 19:28:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:28:57 - GET "/products/list", parameters={}
2024-06-04 19:28:57 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:28:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:28:57 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:28:57 - Completed 200 OK
2024-06-04 19:28:57 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:28:57 - Writing [[]]
2024-06-04 19:28:57 - Completed 200 OK
2024-06-04 19:29:01 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:29:01 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:29:01 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:29:01 - Writing [com.example.ecommercemanagement.model.Cart@1e241ffd]
2024-06-04 19:29:01 - Completed 201 CREATED
2024-06-04 19:29:04 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:29:04 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:29:04 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:29:04 - Writing [com.example.ecommercemanagement.model.Cart@7ad46d0]
2024-06-04 19:29:04 - Completed 201 CREATED
2024-06-04 19:32:51 - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 19:32:51 - HikariPool-1 - Shutdown initiated...
2024-06-04 19:32:51 - HikariPool-1 - Shutdown completed.
2024-06-04 19:36:14 - Starting EcommerceManagementApplication using Java 21.0.1 with PID 34734 (/Users/user/Downloads/ecommerce-management/target/classes started by user in /Users/user/Downloads/ecommerce-management)
2024-06-04 19:36:14 - No active profile set, falling back to 1 default profile: "default"
2024-06-04 19:36:17 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-06-04 19:36:17 - Finished Spring Data repository scanning in 254 ms. Found 4 JPA repository interfaces.
2024-06-04 19:36:20 - Tomcat initialized with port 8080 (http)
2024-06-04 19:36:20 - Starting service [Tomcat]
2024-06-04 19:36:20 - Starting Servlet engine: [Apache Tomcat/10.1.18]
2024-06-04 19:36:20 - Initializing Spring embedded WebApplicationContext
2024-06-04 19:36:20 - Root WebApplicationContext: initialization completed in 6287 ms
2024-06-04 19:36:21 - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-06-04 19:36:21 - HHH000412: Hibernate ORM core version 6.4.1.Final
2024-06-04 19:36:21 - HHH000026: Second-level cache disabled
2024-06-04 19:36:22 - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-06-04 19:36:22 - HikariPool-1 - Starting...
2024-06-04 19:36:27 - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@d9f5fce
2024-06-04 19:36:27 - HikariPool-1 - Start completed.
2024-06-04 19:36:35 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-06-04 19:36:36 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-06-04 19:36:40 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-06-04 19:36:41 - 15 mappings in 'requestMappingHandlerMapping'
2024-06-04 19:36:41 - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2024-06-04 19:36:41 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1eda12b3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5006a697, org.springframework.security.web.context.SecurityContextHolderFilter@1be3e952, org.springframework.security.web.header.HeaderWriterFilter@6e3acd7, org.springframework.web.filter.CorsFilter@193792e6, org.springframework.security.web.authentication.logout.LogoutFilter@5d00e30e, org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter@220d7eb7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7004cd44, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@495e1ad1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@21f9a305, org.springframework.security.web.session.SessionManagementFilter@3514df8d, org.springframework.security.web.access.ExceptionTranslationFilter@1d01fa0c, org.springframework.security.web.access.intercept.AuthorizationFilter@c2dab10]
2024-06-04 19:36:41 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2024-06-04 19:36:41 - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
2024-06-04 19:36:41 - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2024-06-04 19:36:42 - Tomcat started on port 8080 (http) with context path ''
2024-06-04 19:36:42 - Started EcommerceManagementApplication in 29.757 seconds (process running for 31.368)
2024-06-04 19:37:29 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-06-04 19:37:29 - Initializing Servlet 'dispatcherServlet'
2024-06-04 19:37:29 - Detected StandardServletMultipartResolver
2024-06-04 19:37:29 - Detected AcceptHeaderLocaleResolver
2024-06-04 19:37:29 - Detected FixedThemeResolver
2024-06-04 19:37:29 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@72321701
2024-06-04 19:37:29 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@387ef6a7
2024-06-04 19:37:29 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2024-06-04 19:37:29 - Completed initialization in 8 ms
2024-06-04 19:37:29 - DELETE "/cart/remove", parameters={}
2024-06-04 19:37:29 - Mapped to com.example.ecommercemanagement.controller.CartController#removeAllFromCart()
2024-06-04 19:37:29 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:37:29 - Nothing to write: null body
2024-06-04 19:37:29 - Completed 200 OK
2024-06-04 19:37:57 - GET "/cart/list", parameters={}
2024-06-04 19:37:57 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:37:57 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:37:57 - Writing [[]]
2024-06-04 19:37:57 - Completed 200 OK
2024-06-04 19:38:07 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 19:38:07 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:38:07 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:38:07 - Writing [com.example.ecommercemanagement.model.Cart@2b22d67f]
2024-06-04 19:38:07 - Completed 201 CREATED
2024-06-04 19:38:24 - POST "/cart/add?productId=1&quantity=1", parameters={masked}
2024-06-04 19:38:24 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:38:24 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:38:24 - Writing [com.example.ecommercemanagement.model.Cart@31051215]
2024-06-04 19:38:24 - Completed 201 CREATED
2024-06-04 19:38:35 - GET "/cart/list", parameters={}
2024-06-04 19:38:35 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:38:35 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:38:35 - Writing [[com.example.ecommercemanagement.model.Cart@16fc7777]]
2024-06-04 19:38:35 - Completed 200 OK
2024-06-04 19:40:18 - POST "/cart/add?productId=1&quantity=3", parameters={masked}
2024-06-04 19:40:18 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:40:19 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:40:19 - Writing [com.example.ecommercemanagement.model.Cart@69445547]
2024-06-04 19:40:19 - Completed 201 CREATED
2024-06-04 19:40:24 - GET "/cart/list", parameters={}
2024-06-04 19:40:24 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:40:24 - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2024-06-04 19:40:24 - Writing [[com.example.ecommercemanagement.model.Cart@736318d3]]
2024-06-04 19:40:24 - Completed 200 OK
2024-06-04 19:40:34 - GET "/products/list", parameters={}
2024-06-04 19:40:34 - GET "/cart/list", parameters={}
2024-06-04 19:40:34 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:40:34 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:40:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:40:34 - Writing [[com.example.ecommercemanagement.model.Cart@3b47ed16]]
2024-06-04 19:40:34 - Completed 200 OK
2024-06-04 19:40:34 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:40:35 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:40:35 - Completed 200 OK
2024-06-04 19:41:44 - GET "/cart/list", parameters={}
2024-06-04 19:41:44 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:41:44 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:41:44 - Writing [[com.example.ecommercemanagement.model.Cart@523c3f1a]]
2024-06-04 19:41:44 - Completed 200 OK
2024-06-04 19:41:51 - POST "/auth/login", parameters={}
2024-06-04 19:41:51 - Mapped to com.example.ecommercemanagement.controller.AuthenticationController#loginUser(RegistrationDTO)
2024-06-04 19:41:51 - Read "application/json;charset=UTF-8" to [Registration info: Email : devjahrel@gmail.compassword : devjahrelFull Name : nullPhone Number : nul (truncated)...]
2024-06-04 19:41:51 - Username: devjahrel@gmail.com 
2024-06-04 19:41:52 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:41:52 - Writing [com.example.ecommercemanagement.model.LoginResponseDTO@6e044dd1]
2024-06-04 19:41:52 - Completed 200 OK
2024-06-04 19:41:53 - GET "/cart/list", parameters={}
2024-06-04 19:41:53 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:41:53 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:41:53 - Writing [[com.example.ecommercemanagement.model.Cart@7c9f13f7]]
2024-06-04 19:41:53 - Completed 200 OK
2024-06-04 19:42:05 - GET "/cart/list", parameters={}
2024-06-04 19:42:05 - GET "/products/list", parameters={}
2024-06-04 19:42:05 - Mapped to com.example.ecommercemanagement.controller.CartController#list()
2024-06-04 19:42:05 - Mapped to com.example.ecommercemanagement.controller.ProductController#list()
2024-06-04 19:42:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:42:05 - Writing [[com.example.ecommercemanagement.model.Cart@3a08547]]
2024-06-04 19:42:05 - Completed 200 OK
2024-06-04 19:42:05 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:42:05 - Writing [[Product(id=1, image=product-img-1.jpg, brand=Xiaomi, review=3, title=Xiaomi Wireless Earbuds, offer (truncated)...]
2024-06-04 19:42:05 - Completed 200 OK
2024-06-04 19:42:08 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:42:08 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:42:08 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:42:08 - Writing [com.example.ecommercemanagement.model.Cart@2c45bf84]
2024-06-04 19:42:08 - Completed 201 CREATED
2024-06-04 19:42:13 - POST "/cart/add?productId=3&quantity=1", parameters={masked}
2024-06-04 19:42:13 - Mapped to com.example.ecommercemanagement.controller.CartController#addToCart(Long, int)
2024-06-04 19:42:13 - Using 'application/json', given [application/json, text/plain, */*] and supported [application/json, application/*+json]
2024-06-04 19:42:13 - Writing [com.example.ecommercemanagement.model.Cart@7b18c1bd]
2024-06-04 19:42:13 - Completed 201 CREATED
